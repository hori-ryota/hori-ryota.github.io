{"componentChunkName":"component---src-templates-blog-jsx","path":"/blog/create-cloudfront-manager/","result":{"data":{"markdownRemark":{"fields":{"urlPath":"/blog/create-cloudfront-manager/"},"html":"<p>CloudFrontをマネジメントコンソールでぽちぽち管理するのつらい！！</p>\n<p>ということで、awscliとjqを使用してjson管理できる環境を整備してGitHubに公開しました。</p>\n<!--more-->\n<h2><a href=\"https://github.com/hori-ryota/cloudfront-manager\">CloudFront Manager</a></h2>\n<p>個人使用のために作成したので、細かいアレコレはご容赦ください。レビューは大歓迎です。</p>\n<p>以下、記事公開時点のREADME.mdと同内容です。</p>\n<p>コマンドによってjsonのプロパティ順が違うようなので、作業後は <code class=\"language-text\">fetchall.sh</code> でお掃除することを推奨。</p>\n<p><strong>CloudFrontの設定は失敗するとサービスにとって致命傷となるので、使用は自己責任でお願いします。</strong></p>\n<h2>下準備</h2>\n<h3>依存ツール</h3>\n<ul>\n<li><a href=\"https://aws.amazon.com/jp/cli/\">awscli</a></li>\n<li><a href=\"https://stedolan.github.io/jq/\">jq</a></li>\n</ul>\n<p>cloudfrontコマンドはpreview版なので有効にする</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">aws configure <span class=\"token builtin class-name\">set</span> preview.cloudfront <span class=\"token boolean\">true</span></code></pre></div>\n<h2>（基礎知識）主要なawsコマンド</h2>\n<h3>distribution一覧取得</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">aws cloudfront list-distributions</code></pre></div>\n<h3>distribution個別取得</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">aws cloudfront get-distribution --id <span class=\"token variable\">${distributionId}</span></code></pre></div>\n<h3>distribution更新</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">aws cloudfront update-distribution --cli-input-json file://<span class=\"token variable\">${jsonFileName}</span></code></pre></div>\n<p>updateの対象distributionIdはjson内に記述されているのでコマンドで指定はしない</p>\n<h3>distribution作成</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">aws cloudfront create-distribution --cli-input-json file://<span class=\"token variable\">${jsonFileName}</span></code></pre></div>\n<h2>ディレクトリ構成</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">backup/ # 更新時に旧jsonを退避 # gitignore対象\ndraft/  # 作成用の下書き置き場 # gitignore対象\njson/   # cloudfrontから取得したjson置き場</code></pre></div>\n<p>backupディレクトリはdiffを取りやすくするため配置。git管理なので本来は不要ですが、実行時の保険として。</p>\n<p>作成はマネジメントコンソールでポチって作るか、後述のコマンドで既存からコピーするのがいいかと思います。</p>\n<p>更新はjsonディレクトリ内のファイルを更新してcloudfrontに反映、返ってきたresultでjsonを上書きします。</p>\n<p>jsonディレクトリをGitHubにpushすると構成が見えてしまうので、必要に応じてgitignoreしてください（pull-requestでレビューできなくなりますが）。</p>\n<h2>スクリプト</h2>\n<p>vim の quickrun で叩きやすくするため、dirname などでのパス解決はしていないです。 <code class=\"language-text\">cloudfront-manager/</code> ディレクトリ直下で実行してください。</p>\n<h3>fetchall.sh</h3>\n<p>初期化用。cloudfrontからEnabled状態のdistributionsを取ってきてjsonディレクトリに反映。</p>\n<p>削除済みdistributionのjson削除は行わないので、削除も必要ならjsonディレクトリを削除後に実行してください。</p>\n<h3>update.sh</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./update.sh <span class=\"token variable\">${targetCName}</span></code></pre></div>\n<p>更新用。<code class=\"language-text\">get-distribution</code> のjsonと <code class=\"language-text\">update-distribution</code> の形式は若干違うので、<code class=\"language-text\">jq</code> コマンドで整形したものを入力へ。</p>\n<p>結果を元にjsonディレクトリ内の該当jsonを上書きします。</p>\n<h3>createDraft.sh</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./createDraft.sh <span class=\"token variable\">${targetName}</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">${srcJsonFile}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>新規作成用に下書きを <code class=\"language-text\">draft/</code> 下に作成。 <code class=\"language-text\">srcJsonFile</code> を指定すればコピーしてcreate用Jsonに整形。指定がなければ skeleton 作成。</p>\n<p>CallerReferenceの値は<code class=\"language-text\">date +%s</code> コマンドでタイムスタンプを使用していますが、distribution間でuniqueにする必要があるようなので必要に応じて調整。</p>\n<h3>create.sh</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./create.sh <span class=\"token variable\">${targetName}</span></code></pre></div>\n<p><code class=\"language-text\">draft/</code> 下の下書きから新規作成。結果をjsonディレクトリ内に保存。</p>\n<p>Locationプロパティは邪魔なので削除。</p>\n<h2>補足</h2>\n<p>スクリプトは基礎的なコマンドとして、for文で実行するスクリプトを別途用意すると便利。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">set</span> -eu\n\n<span class=\"token assign-left variable\">targets</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n<span class=\"token string\">\"DISTRIBUTION_ID_1\"</span>\n<span class=\"token string\">\"DISTRIBUTION_ID_2\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token assign-left variable\">customErrorResponses</span><span class=\"token operator\">=</span><span class=\"token string\">'\n      {\n        \"Items\": [\n          {\n            \"ErrorCode\": 400,\n            \"ResponsePagePath\": \"\",\n            \"ResponseCode\": \"\",\n            \"ErrorCachingMinTTL\": 1\n          }\n        ],\n        \"Quantity\": 1\n      }\n'</span>\n\n<span class=\"token assign-left variable\">dir</span><span class=\"token operator\">=</span><span class=\"token string\">'json'</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ${#targets[@]}<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token assign-left variable\">target</span><span class=\"token operator\">=</span><span class=\"token variable\">${targets<span class=\"token punctuation\">[</span>$i<span class=\"token punctuation\">]</span>}</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"target = <span class=\"token variable\">$target</span>\"</span>\n\n  <span class=\"token assign-left variable\">jsonPath</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$dir</span>/<span class=\"token variable\">$target</span>.json\"</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -e <span class=\"token variable\">$jsonPath</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"json file not found [<span class=\"token variable\">$jsonPath</span>]\"</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">fi</span>\n\n  <span class=\"token assign-left variable\">srcJson</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">cat</span> $jsonPath<span class=\"token variable\">`</span></span>\n\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$srcJson</span> <span class=\"token operator\">|</span> jq <span class=\"token string\">\".Distribution.DistributionConfig.CustomErrorResponses=<span class=\"token variable\">$customErrorResponses</span>\"</span> <span class=\"token operator\">></span> <span class=\"token variable\">$jsonPath</span>\n\n  ./update.sh <span class=\"token variable\">$target</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>みたいな。</p>\n<h2>TODO</h2>\n<ul>\n<li>\n<p>distributionId管理だと視認性が悪いのでaliasをつけたい。</p>\n<ul>\n<li>cnameがわかりやすいけど複数cnameを使用するときに困るので悩み中。</li>\n<li>tag機能もあるけどawscli経由だと情報が取得できていなさそうなので様子見。</li>\n</ul>\n</li>\n</ul>\n<h2>以上</h2>\n<p>ということで、一括でdistributionのjsonを取得し、編集して更新をかけられる環境が構築できました。</p>\n<p>json管理にすることで差分のレビューもできるので、個人的には非常に捗っております。</p>\n<blockquote>\n<p><a href=\"/blog/update-cloudfront-with-awscli\">CloudFrontの設定をコマンドラインから更新する</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"/blog/create-cloudfront-with-awscli\">CloudFrontの設定をコマンドラインから作成する</a></p>\n</blockquote>\n<p>の集大成でした。</p>","excerpt":"CloudFrontをマネジメントコンソールでぽちぽち管理するのつらい！！ ということで、awscliとjqを使用してjson管理できる環境を整備してGitHubに公開しました。","frontmatter":{"date":"2016-11-03","title":"CloudFrontのawscliでjson管理できる環境を整備した","tags":["Development","Shell","AWS","CloudFront","Created"],"eyecatch":null}}},"pageContext":{"urlPath":"/blog/create-cloudfront-manager/","previous":{"fields":{"urlPath":"/blog/create-cloudfront-with-awscli/"},"frontmatter":{"title":"CloudFrontの設定をコマンドラインから作成する","date":"2016-11-03"}},"next":{"fields":{"urlPath":"/blog/abematvdev20161015/"},"frontmatter":{"title":"AbemaTV Developer Conference 2016 で HLS と生放送について喋りました #abematv_dev","date":"2016-11-05"}}}},"staticQueryHashes":["2432199166","277821901","3202776293"]}