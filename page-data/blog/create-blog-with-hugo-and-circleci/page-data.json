{"componentChunkName":"component---src-templates-blog-jsx","path":"/blog/create-blog-with-hugo-and-circleci/","result":{"data":{"markdownRemark":{"fields":{"urlPath":"/blog/create-blog-with-hugo-and-circleci/","jstDate":"2015-04-17"},"html":"<p><code class=\"language-text\">hori-ryota.github.io</code> みたいな、GitHubドメインの技術ブログかっこいいよね〜と思ったので流行りのHugoとCircleCIを組み合わせて作ってみました。無料。</p>\n<p>それぞれのツールを軽く紹介した上で、実際に設定した手順をのせておきます。Mac用。</p>\n<!--more-->\n<p>まだ作ったばかりなので設定漏れしているところとか画像の最適化がまだだったりとか色々ありますが、とりあえず公開まではこじつけられるかと思います。</p>\n<h2>完成後の記事作成フロー</h2>\n<p>記事の作成フローはこんな感じになります。お気に召さなければ違うツールのほうがいいかもです。</p>\n<ol>\n<li><code class=\"language-text\">hugo new post/aritcle-title.md</code>で記事の作成</li>\n<li>Markdown形式で記事を書く</li>\n<li>gitでpushする</li>\n<li>CircleCIがpushを検知して自動公開</li>\n</ol>\n<p>CircleCIを使うことでpush ≒ 公開になるので楽。</p>\n<h2>HugoとかCircleCIとかGitHub Pagesとかって何</h2>\n<p>まずはざっくり説明。</p>\n<h3>Hugo</h3>\n<blockquote>\n<p><a href=\"http://gohugo.io/\">Hugo :: A fast and modern static website engine</a></p>\n</blockquote>\n<p>Go言語で書かれた静的サイトジェネレーター。静的サイトジェネレーターというのはテンプレや記事のテキストデータからhtmlなどなど、公開用のデータを静的に吐き出してくれるやつ。</p>\n<p>ブログといえばWordPressというイメージがありますが、アクセス集中すると重いし、セキュリティも面倒だし…というのでなんか重宝されてきているらしい。</p>\n<p>GitHub Pagesに投げとけば無料だし、エンジニアっぽい（小並感）し。</p>\n<p>Markdownで書いておけば、他のツールを使いたくなった時の移行コストも少ないと思われるので、始める心理的な障壁が低いのも良い。</p>\n<p><a href=\"http://octopress.org/\">Octopress</a>とか<a href=\"https://hexo.io/\">Hexo</a>とかもありますが、Hugoの方が変換が爆速らしいっていうのと、Go言語っていうのにミーハー心を刺激され、Hugoにしてみました。</p>\n<h3>CircleCI</h3>\n<blockquote>\n<p><a href=\"https://circleci.com/\">CircleCI</a></p>\n</blockquote>\n<p>いわゆるCIツール。JenkinsとかTravisCIとか。</p>\n<p>基本的にはGitHubにPushされたコードを何か色々処理してくれるという感じのやつ。</p>\n<p>Hugoは変換までしかやらずにデプロイとかは人任せなので、CircleCIで公開は行うようにします。なんか聞きなれないと難しそうだけど、やったら簡単でした。</p>\n<p>Jenkinsは自分で用意するのが面倒で、TravisCIはPrivateリポジトリが有料。</p>\n<p>CircleCIは並列性に課金する料金システムなので、並列性0の順次ビルドであればPrivateリポジトリでも無料。すごい。</p>\n<h3>GitHub Pages</h3>\n<p><a href=\"https://pages.github.com/\">GitHub Pages</a></p>\n<p>GitHubに静的WebコンテンツをあげておくとWebページとして見られるようにしてくれるGitHubのすばらしい機能。無料。ありがたい。</p>\n<p>実は2種類あって</p>\n<ul>\n<li><code class=\"language-text\">ユーザー名.github.io</code> で公開されるGitHub Pages</li>\n<li><code class=\"language-text\">ユーザー名.github.io/リポジトリ名</code> で公開されるGitHub Pages</li>\n</ul>\n<p>の2種で、Hugoのドキュメント（<a href=\"http://gohugo.io/tutorials/github-pages-blog/\">Hosting on GitHub Pages</a>）に書いてあるのは後者。</p>\n<p>今回は前者の <code class=\"language-text\">ユーザー名.github.io</code> で公開したかったので、そちらの手順をまとめます。</p>\n<h2>Hugoのインストール</h2>\n<p>選択肢は2つ。Goを使って<code class=\"language-text\">go get github.com/spf13/hugo</code>するか、Homebrewで<code class=\"language-text\">brew install hugo</code>か。</p>\n<p>GoとHomebrewの入れ方はそれぞれのドキュメントを参照。</p>\n<h2>ベースのファイルの作成</h2>\n<p>好きな場所で<code class=\"language-text\">hugo new site サイト名</code>をすると、サイト名のディレクトリが作成され、その中に色々入ってきます。<code class=\"language-text\">hugo new site horiblog</code>みたいな。</p>\n<p>こんな感じになります。ざっくり。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">▸ archetypes/ # categoriesとかtagsとかのメタデータを設定するところ\n▸ content/    # 記事データとか、コンテンツデータを置くところ\n▸ data/\n▸ layouts/\n▸ static/     # 静的ファイルを置くところ\n  config.toml # 設定ファイル</code></pre></div>\n<p><code class=\"language-text\">hugo</code>って叩くと変換が始まりますが、まだなにもない状態。</p>\n<h2>テーマのインストール</h2>\n<p>テーマ ≒ 見た目ですね。自作してももちろんいいですが、取り急ぎ拾って使ってみました。</p>\n<blockquote>\n<p><a href=\"https://github.com/spf13/hugoThemes/\">spf13/hugoThemes</a></p>\n</blockquote>\n<p>このへんから<code class=\"language-text\">git submodule add git@github.com:spf13/hugoThemes.git themes</code>してもいいし、</p>\n<blockquote>\n<p><a href=\"https://github.com/zyro/hyde-x\">zyro/hyde-x</a></p>\n</blockquote>\n<p>このへんから<code class=\"language-text\">git submodule add git@github.com:zyro/hyde-x.git themes/hyde-x</code>してもOK。</p>\n<p>後者のほうがビルドが早くなるので良さそう。そんなにしょっちゅう変えるものでもないので。</p>\n<p>テーマの使い方は実行時に指定してもいいですが、config.tomlに<code class=\"language-text\">theme = &quot;テーマ名&quot;</code>を指定するのが便利かと思います。</p>\n<p>他にも、テーマによって独自の設定パラメータが用意されてたりするので、使うテーマの <code class=\"language-text\">README.md</code> を参照。</p>\n<p>submoduleで入れているので、適宜 <code class=\"language-text\">git submodule update --init --recursive</code> とかやってください。</p>\n<p>わからなければsubmoduleじゃなくてファイルぶっこんでもいいと思います。</p>\n<h2>リポジトリの作成</h2>\n<p>GitHubにリポジトリを作る。今回は作成用と公開用で2つリポジトリを作ります。</p>\n<p>公開用は<code class=\"language-text\">ユーザー名.github.io</code>で作成。作成用のリポジトリ名はなんでもいいです。私は<code class=\"language-text\">horiblog</code>で作成。</p>\n<p>作成用はプライベートリポジトリにしておくと下書きとか構成とか見られなくていいけど、まぁ別に公開されちゃってても気にならないならおk。</p>\n<p>プライベートリポジトリは課金なので、お財布とご相談してください。</p>\n<h2>.gitignoreの設置</h2>\n<p>.gitignoreに<code class=\"language-text\">public/</code>を追加。</p>\n<h2>gitの設定</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">git</span> init</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin <span class=\"token variable\">${自分のgithubの作成用リポジトリ}</span></span></span></code></pre></div>\n<p>で設定。</p>\n<h2>CircleCIの設定</h2>\n<blockquote>\n<p><a href=\"https://circleci.com/add-projects\">Add projects - CircleCI</a></p>\n</blockquote>\n<p>ここから。作った作成用リポジトリをBuild Projectボタンで有効化。</p>\n<p>で、このままだとCircleCIは作成用のリポジトリにしかアクセスできず、公開用のリポジトリにデータを投げられない（<a href=\"https://circleci.com/docs/github-security-ssh-keys\">GitHub security and SSH keys - CircleCI</a>）ので、以下の設定を。</p>\n<ol>\n<li>CircleCIの作成用リポジトリのやつから<code class=\"language-text\">Project Settings</code>で設定画面を開く</li>\n<li><code class=\"language-text\">Permissons</code>にある<code class=\"language-text\">Checkout SSH keys</code>を開く</li>\n<li><code class=\"language-text\">Authorize w/ GitHub</code>みたいなそれっぽいボタンがあるので、ぽちっと押してGitHub認証。</li>\n<li>認証が終わるとCircleCIの画面に帰ってくるので、今度は<code class=\"language-text\">Create and add ユーザー名 user key</code>みたいなボタンがあるのでぽちっと。</li>\n</ol>\n<p>これで他のリポジトリにアクセスできるようになります。簡単でとても良い。</p>\n<h2>circle.ymlの設置</h2>\n<p>CircleCIのビルド用にcircle.ymlを設置。この設定ファイルをみてCircleCIがいい感じにビルドしてくれる。</p>\n<blockquote>\n<p><a href=\"https://circleci.com/docs/configuration\">Configuring CircleCI - CircleCI</a></p>\n</blockquote>\n<p>ファイルを見たほうが雰囲気をつかみやすいと思うので、貼っておきます。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>circleci.yaml</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">checkout</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">post</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> git submodule sync\n    <span class=\"token punctuation\">-</span> git submodule update <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>init <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>recursive\n\n<span class=\"token key atrule\">machine</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">timezone</span><span class=\"token punctuation\">:</span> Asia/Tokyo\n\n<span class=\"token key atrule\">dependencies</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">pre</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> go get <span class=\"token punctuation\">-</span>v github.com/spf13/hugo\n    <span class=\"token punctuation\">-</span> git config <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>global user.name \"CircleCI\"\n    <span class=\"token punctuation\">-</span> git config <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>global user.email \"circleci@example.com\"\n\n<span class=\"token key atrule\">deployment</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master\n    <span class=\"token key atrule\">commands</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> git clone git@github.com<span class=\"token punctuation\">:</span>hori<span class=\"token punctuation\">-</span>ryota/hori<span class=\"token punctuation\">-</span>ryota.github.io.git public\n      <span class=\"token punctuation\">-</span> hugo\n      <span class=\"token punctuation\">-</span> cd public <span class=\"token important\">&amp;&amp;</span> git add .\n      <span class=\"token punctuation\">-</span> cd public <span class=\"token important\">&amp;&amp;</span> git commit <span class=\"token punctuation\">-</span>m \"<span class=\"token punctuation\">[</span>ci skip<span class=\"token punctuation\">]</span> publish\"\n      <span class=\"token punctuation\">-</span> cd public <span class=\"token important\">&amp;&amp;</span> git push origin master</code></pre></div>\n<p>公開用リポジトリのバージョン管理なんてどーでもいいので、git周りの設定は割と適当です。</p>\n<p>ちなみに、これ作っていきなりpushしてもcontentの中身が空っぽだとcontentディレクトリがgitで管理されないため、CircleCIさんがファイル足らねーよ！って怒ってきます。</p>\n<p>まぁ、CircleCIでログも表示されるのでエラーが出たらよしなに。</p>\n<h2>記事の作成</h2>\n<p>CircleCIの設定まででひと通りの設定は完了。config.tomlをテーマに合わせていい感じに設定する必要はあるけど、後述。</p>\n<p>とりあえず記事を作ってみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">hugo new post/article-title.md</span></span></code></pre></div>\n<p>を叩くと、 <code class=\"language-text\">content/post/article-title.md</code> が作成されているはず。これをMarkdownで編集すれば記事になる。</p>\n<p>上部にメタタグっぽいcategoriesとかがあるのだけど、詳しくはこちら。</p>\n<blockquote>\n<p><a href=\"http://gohugo.io/content/front-matter/\">Front Matter</a></p>\n</blockquote>\n<p>デフォルトで入るやつは、テーマもしくは自分の<a href=\"http://gohugo.io/content/archetypes/\">Archetypes</a>の設定に依存します。</p>\n<p>この記事だとこんな感じです。</p>\n<p>あくまで、hyde-xテーマの場合です。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>article-title.md</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">+++\n<span class=\"token key property\">categories</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Development\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hugo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CircleCI\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GitHub Pages\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">date</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2015-04-17T09:00:00+09:00\"</span>\n<span class=\"token key property\">description</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"hori-ryota.github.ioみたいな、GitHubドメインの技術ブログかっこいいよね〜と思ったので流行りのHugoとCircleCIを組み合わせて作ってみたら超お手軽だったので手順をまとめてみた。無料。\"</span>\n<span class=\"token key property\">keywords</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hugo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CircleCI\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GitHub Pages\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">title</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"HugoとCircleCIでGitHub PagesにBlog公開してみた\"</span>\n<span class=\"token key property\">slug</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"create-blog-with-hugo-and-circleci\"</span>\n\n+++</code></pre></div>\n<p>設定項目はテーマにもよるし、困ったら後で置換すればいいや〜って思っていますが、一応以下の様な方針。</p>\n<ul>\n<li>\n<p>categories、tagsについて</p>\n<ul>\n<li>普通はcategoryとtagsな気がするよね…tagsがデフォルトじゃない…？</li>\n<li>categoryってディレクトリみたいに記事ごとに一つなイメージあるけど、categories？複数…？</li>\n<li>そもそもcategoryみたいな区分って、SEOが云々って理由以外でブログでは要らないかも…？</li>\n<li>categoriesをtagsとして使おう！</li>\n<li>ただし、後でcategoryが欲しくなるかもしれないので、categoriesの一つ目はcategory的なやつにするルールにしておく。</li>\n</ul>\n</li>\n<li>\n<p>slugについて</p>\n<ul>\n<li>URLはtitleからスペースをハイフンに変換したりしてくれるけど、日本語つらい</li>\n<li>ので、urlとして使われるslugは明示的に指定。</li>\n</ul>\n</li>\n<li>\n<p>keywordsについて</p>\n<ul>\n<li>適当。categoriesでいいなぁ…tagsの代わりとしてとりあえず入れてみた。</li>\n</ul>\n</li>\n<li>\n<p>dateについて</p>\n<ul>\n<li>ファイルの作成日時が入るけど、公開するタイミングで手動で書き換え。ちょっとめんどくさい。スクリプト書こうかな…</li>\n</ul>\n</li>\n</ul>\n<p>基本的にはデフォルト項目からいじらないほうが後で楽だと思ってこんな感じの設定に。</p>\n<p>といいつつ、tagsがなかったりdraftがデフォルトじゃなかったりでちょっと気持ち悪いので、テーマごと書き換えるかも。</p>\n<h2>config.tomlの設定</h2>\n<blockquote>\n<p><a href=\"http://gohugo.io/overview/configuration/\">Configuring Hugo</a></p>\n</blockquote>\n<p>デフォルトで入っている基本項目に加えて、テーマごとで指定できるパラメータを突っ込めばOK。</p>\n<p>とはいえ何か詰まることもあると思うので、参考までに自分のやつを晒しておきます。</p>\n<p>アカウント関係はhogehogeに書き換えたので、よしなに置き換えてください。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>config.toml</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token key property\">baseurl</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"http://hori-ryota.github.io\"</span>\n<span class=\"token key property\">languageCode</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"ja\"</span>\n<span class=\"token key property\">title</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"Hori Blog\"</span>\n<span class=\"token key property\">theme</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"hyde-x\"</span>\n<span class=\"token key property\">MetaDataFormat</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"toml\"</span>\n<span class=\"token key property\">disqusShortname</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"hogehoge\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">author</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"Hori Ryota\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">permalinks</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">post</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/blog/:slug/\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">indexes</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">category</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"categories\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">params</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">theme</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"theme-base-0d\"</span>\n  <span class=\"token key property\">highlight</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"sunburst\"</span>\n  <span class=\"token key property\">googleAnalytics</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"UA-00000000-1\"</span>\n\n  <span class=\"token key property\">facebook</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"https://www.facebook.com/hogehoge\"</span>\n  <span class=\"token key property\">twitter</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"https://twitter.com/hogehoge\"</span>\n  <span class=\"token key property\">github</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"https://github.com/hogehoge\"</span></code></pre></div>\n<p><code class=\"language-text\">baseurl</code> の末尾に <code class=\"language-text\">/</code> を入れるか入れないかで迷ったのですが、テンプレートによって個性があるようで…。hyde-xだと <code class=\"language-text\">baseurl</code> のあとに <code class=\"language-text\">/</code> から始まるpathをくっつける仕様になっているようなので、今回は <code class=\"language-text\">/</code> 無し。</p>\n<h2>記事プレビュー</h2>\n<p><code class=\"language-text\">hugo server</code> ってやるとデフォルトでは <code class=\"language-text\">http://localhost:1313/</code> でサイトが見られるようになっているはず。</p>\n<p>記事を書くときは <code class=\"language-text\">hugo server -w</code> ってやっておくと保存の度に更新してくれるから楽です。 <code class=\"language-text\">-d</code> もつけると下書きも含めてくれます。</p>\n<h2>記事公開</h2>\n<p>今回の設定では、gitのmasterブランチにpushすればCircleCIが動いて更新されてくれる…はず！</p>\n<h2>おわりに</h2>\n<p>思ったより簡単に作れたなーという印象。とはいえ画像の最適化とかは自動化できていないので、そのへんも組み込もうか検討中。</p>\n<p>Hugoはさくっと作れる使用感は良いのだけど、テーマ周りがちょっとまだ微妙だなーと…。記事のメタ情報も統一されていなくてテーマごとに個性が出ちゃったりとか、なんかそのへんが嫌。</p>\n<p>もっと流行って、同じ記事データでさくっと見た目を変えられるようになってくるといいなぁという気持ち。</p>\n<p>テーマを自分で作れば解決しますがそこまでは頑張らない。</p>\n<p>以上、HugoとCircleCIでGitHub PagesにBlogを公開する手順のまとめでした。</p>","excerpt":"みたいな、GitHubドメインの技術ブログかっこいいよね〜と思ったので流行りのHugoとCircleCIを組み合わせて作ってみました。無料。 それぞれのツールを軽く紹介した上で、実際に設定した手順をのせておきます。Mac用。","frontmatter":{"date":"2015-04-17T09:30:00+09:00","title":"HugoとCircleCIでGitHub PagesにBlogを公開してみた","tags":["Development","Hugo","CircleCI","GitHub Pages"],"eyecatch":null}}},"pageContext":{"urlPath":"/blog/create-blog-with-hugo-and-circleci/","previous":null,"next":{"fields":{"urlPath":"/blog/live-broadcasting-with-mac/","jstDate":"2015-05-10"},"frontmatter":{"title":"初心者でも簡単にゲーム実況ができるように手順をまとめてみた（Mac版）","date":"2015-05-10"}}}},"staticQueryHashes":["1862978031","277821901","4270455655"]}