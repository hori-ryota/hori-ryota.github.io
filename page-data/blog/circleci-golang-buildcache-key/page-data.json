{"componentChunkName":"component---src-templates-blog-jsx","path":"/blog/circleci-golang-buildcache-key/","result":{"data":{"markdownRemark":{"fields":{"urlPath":"/blog/circleci-golang-buildcache-key/","jstDate":"2018-05-19"},"html":"<p>今更ながら CircleCI 2.0 を本格的に触りました。 CircleCI 2.0 になりキャッシュの柔軟性が向上したようなので、 Go 1.10 から導入された build cache と併せて最適化してみました。</p>\n<!--more-->\n<h2>前提知識</h2>\n<h3>ドキュメントなど</h3>\n<ul>\n<li><a href=\"https://circleci.com/docs/2.0/language-go/\">Language Guide: Go - CircleCI</a></li>\n<li><a href=\"https://circleci.com/docs/2.0/caching/\">Caching Dependencies - CircleCI</a></li>\n<li><a href=\"https://golang.org/cmd/go/#hdr-Build_and_test_caching\">go - hdr-Build<em>and</em>test_caching - The Go Programming Language</a></li>\n</ul>\n<h2>戦略</h2>\n<ul>\n<li>依存管理は <a href=\"https://github.com/golang/dep\">dep</a> を使う</li>\n<li>vendor は Gopkg.lock が一緒なら同じものを用いる</li>\n<li>\n<p>build cache は基本的にはブランチごとに管理</p>\n<ul>\n<li>ただし、新規ブランチは master からキャッシュを拾いたい</li>\n</ul>\n</li>\n</ul>\n<h2>お急ぎの人のための結論</h2>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">working_directory</span><span class=\"token punctuation\">:</span> /go/src/github.com/hori<span class=\"token punctuation\">-</span>ryota/hoge <span class=\"token comment\"># 対象のリポジトリに合わせて変更</span>\n    <span class=\"token key atrule\">docker</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> circleci/golang<span class=\"token punctuation\">:</span>1.10.2\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">GOCACHE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/tmp/go/cache\"</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> checkout\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> git submodule sync\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> git submodule update <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>init\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">restore_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">keys</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> vendor<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> checksum \"Gopkg.lock\" <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">-</span> dep\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ensure\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            if [ ! -d vendor ]; then\n              if ! type dep >/dev/null 2>&amp;1; then\n                go get github.com/golang/dep/cmd/dep\n              fi\n              dep ensure\n            fi</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">save_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> vendor<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> checksum \"Gopkg.lock\" <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> vendor\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">save_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> dep\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> /go/bin/dep\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">restore_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">keys</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> build<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> .Branch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>\n            <span class=\"token punctuation\">-</span> build<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span>master<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>\n            <span class=\"token punctuation\">-</span> build<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> build\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> make build\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">save_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> build<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> .Branch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> .Revision <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> /tmp/go/cache\n          <span class=\"token key atrule\">when</span><span class=\"token punctuation\">:</span> on_fail\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> prepare cache dir if not exists\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> mkdir <span class=\"token punctuation\">-</span>p $GOCACHE\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">persist_to_workspace</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> /\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> tmp/go/cache\n            <span class=\"token punctuation\">-</span> go/src/github.com/hori<span class=\"token punctuation\">-</span>ryota/hoge/artifacts\n\n  <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">working_directory</span><span class=\"token punctuation\">:</span> /go/src/github.com/hori<span class=\"token punctuation\">-</span>ryota/hoge\n    <span class=\"token key atrule\">docker</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> circleci/golang<span class=\"token punctuation\">:</span>1.10.2\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">GOCACHE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/tmp/go/cache\"</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> checkout\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">restore_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">keys</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> vendor<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> checksum \"Gopkg.lock\" <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">attach_workspace</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">at</span><span class=\"token punctuation\">:</span> /\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> make test\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">save_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> build<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> .Branch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> .Revision <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> /tmp/go/cache\n          <span class=\"token key atrule\">when</span><span class=\"token punctuation\">:</span> always\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">persist_to_workspace</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> .\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> artifacts\n\n  <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">working_directory</span><span class=\"token punctuation\">:</span> /go/src/github.com/hori<span class=\"token punctuation\">-</span>ryota/hoge\n    <span class=\"token key atrule\">docker</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> circleci/golang<span class=\"token punctuation\">:</span>1.10.2\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> checkout\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">attach_workspace</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">at</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> deploy\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> make deploy\n\n<span class=\"token key atrule\">workflows</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> build\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> test <span class=\"token comment\"># if needed</span>\n          <span class=\"token key atrule\">requires</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> build\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> deploy <span class=\"token comment\"># if needed</span>\n          <span class=\"token key atrule\">requires</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> test </code></pre></div>\n<h2>解説</h2>\n<p>キャッシュの挙動とともに上から解説していきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">working_directory</span><span class=\"token punctuation\">:</span> /go/src/github.com/hori<span class=\"token punctuation\">-</span>ryota/hoge <span class=\"token comment\"># 対象のリポジトリに合わせて変更</span>\n    <span class=\"token key atrule\">docker</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> circleci/golang<span class=\"token punctuation\">:</span>1.10.2</code></pre></div>\n<p>Go なので <code class=\"language-text\">woking_directory</code> を GOPATH 内に設定しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">GOCACHE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/tmp/go/cache\"</span></code></pre></div>\n<p>build cache の保存先は <code class=\"language-text\">$GOCACHE</code> で指定できます。扱いやすいように明示的に設定。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> checkout\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> git submodule sync\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> git submodule update <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>init</code></pre></div>\n<p>本題と関係ないですが submodule を取得するならここ。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">restore_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">keys</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> vendor<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> checksum \"Gopkg.lock\" <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">-</span> dep\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ensure\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            if [ ! -d vendor ]; then\n              if ! type dep >/dev/null 2>&amp;1; then\n                go get github.com/golang/dep/cmd/dep\n              fi\n              dep ensure\n            fi</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">save_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> vendor<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> checksum \"Gopkg.lock\" <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> vendor\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">save_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> dep\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> /go/bin/dep</code></pre></div>\n<p>ここは <code class=\"language-text\">vendor</code> のキャッシュです。まず <code class=\"language-text\">restore_cache</code> ですが、 <code class=\"language-text\">restore_cache</code> は <code class=\"language-text\">keys</code> で指定したリストを順番にチェックし、初めに見つけた最初のキャッシュのみ取得します。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">restore_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">keys</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> vendor<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> checksum \"Gopkg.lock\" <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">-</span> dep</code></pre></div>\n<p>よってこの場合だと <code class=\"language-text\">vendor-{{ checksum &quot;Gopkg.lock&quot; }}</code> があれば使用し、なければ <code class=\"language-text\">dep</code> を取得します。更になければ無視。<code class=\"language-text\">vendor</code> が存在していたら <code class=\"language-text\">dep</code> は入れる必要がないので便利ですね。</p>\n<p>次に <code class=\"language-text\">ensure</code> 部ですが、 <code class=\"language-text\">vendor/</code> と <code class=\"language-text\">dep</code> の存在によって処理を分岐させます。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ensure\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            if [ ! -d vendor ]; then\n              if ! type dep >/dev/null 2>&amp;1; then\n                go get github.com/golang/dep/cmd/dep\n              fi\n              dep ensure\n            fi</span></code></pre></div>\n<p><code class=\"language-text\">vendor/</code> ディレクトリがなかった場合のみ、 <code class=\"language-text\">dep</code> の存在チェックをして、なければインストール。その後 <code class=\"language-text\">dep</code> を使って <code class=\"language-text\">ensure</code> しています。</p>\n<p>最後はキャッシュに保存。 CircleCI 2.0 のキャッシュは key がすでに存在すれば上書きせずにスルーします。今回は <code class=\"language-text\">vendor</code> は <code class=\"language-text\">Gopkg.lock</code> に対して一意とし、 <code class=\"language-text\">dep</code> の更新性も考慮しないので決め打ちです。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">save_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> vendor<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> checksum \"Gopkg.lock\" <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> vendor\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">save_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> dep\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> /go/bin/dep</code></pre></div>\n<p>もし <code class=\"language-text\">dep</code> の更新を行いたい場合は key にリビジョンや日付などの suffix をつけても良いかもです。</p>\n<p>次に build cache です。方針のおさらいをしておきます。</p>\n<ul>\n<li>\n<p>build cache は基本的にはブランチごとに管理</p>\n<ul>\n<li>ただし、新規ブランチは master からキャッシュを拾いたい</li>\n</ul>\n</li>\n</ul>\n<p>これを実現するための <code class=\"language-text\">restore_cache</code> がこちら。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">restore_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">keys</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> build<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> .Branch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>\n            <span class=\"token punctuation\">-</span> build<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span>master<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>\n            <span class=\"token punctuation\">-</span> build<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span></code></pre></div>\n<p>上からチェックされるので意図通りの取得ができるかと思います。3つ目の <code class=\"language-text\">build-cache-</code> のみのものは使われることはないと思いますが、一応つけてみました。</p>\n<p><code class=\"language-text\">save_cache</code> 側がこちら。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> build\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> make build\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">save_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> build<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> .Branch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> .Revision <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> /tmp/go/cache\n          <span class=\"token key atrule\">when</span><span class=\"token punctuation\">:</span> on_fail</code></pre></div>\n<p>CircleCI 2.0 のキャッシュは、 key が前方一致する中で最新のものを取得する仕組みになっています。</p>\n<p>なので更新性のあるデータについては <code class=\"language-text\">{{ .Revision }}</code> のような suffix をつけて保存しておき、取得側では suffix を取り除いた key を用いるとうまくいきます。同じ Revision でも更新性をもたせたい場合は <code class=\"language-text\">{{ epoch }}</code> などを併用すると良いかと思います。</p>\n<p>変数の一覧はこちら。</p>\n<blockquote>\n<p><a href=\"https://circleci.com/docs/2.0/caching/#using-keys-and-templates\">Caching Dependencies - CircleCI</a></p>\n</blockquote>\n<p>ここで <code class=\"language-text\">when: on_fail</code> を使っている理由はこちら。</p>\n<ul>\n<li>build が成功した場合は test 後のキャッシュを保存したい</li>\n<li>build が失敗した場合でも何らかのキャッシュが作成される場合、保存しておきたい</li>\n</ul>\n<p>まぁ、一つ前の revision のキャッシュが残っているのであれば頑張って保存するほどじゃないかなーとは思っています。前方一致で取れるのを知らずに <code class=\"language-text\">CIRCLE_PREVIOUS_BUILD_NUM</code> らへんで頑張ろうとしていたときの名残り。</p>\n<p>そして build の workflow のラスト。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> prepare cache dir if not exists\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> mkdir <span class=\"token punctuation\">-</span>p $GOCACHE\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">persist_to_workspace</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> /\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> tmp/go/cache\n            <span class=\"token punctuation\">-</span> go/src/github.com/hori<span class=\"token punctuation\">-</span>ryota/hoge/artifacts</code></pre></div>\n<p><code class=\"language-text\">persist_to_workspace</code> で次の workflow にデータを渡します。ディレクトリがないと失敗するので <code class=\"language-text\">mkdir -p</code> して保証。 <code class=\"language-text\">artifacts</code> ディレクトリは build の成果物などなどの想定です。</p>\n<p>次に test の workflow ですが、ここは <code class=\"language-text\">vendor</code> の <code class=\"language-text\">restore_cache</code> をして test して build cache を <code class=\"language-text\">save_cache</code> するだけです。 <code class=\"language-text\">vendor</code> は <code class=\"language-text\">attach_workspace</code> するより <code class=\"language-text\">restore_cache</code> のほうが速かった。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">working_directory</span><span class=\"token punctuation\">:</span> /go/src/github.com/hori<span class=\"token punctuation\">-</span>ryota/hoge\n    <span class=\"token key atrule\">docker</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> circleci/golang<span class=\"token punctuation\">:</span>1.10.2\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">GOCACHE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/tmp/go/cache\"</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> checkout\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">restore_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">keys</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> vendor<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> checksum \"Gopkg.lock\" <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">attach_workspace</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">at</span><span class=\"token punctuation\">:</span> /\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> make test\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">save_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> build<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> .Branch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> .Revision <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> /tmp/go/cache\n          <span class=\"token key atrule\">when</span><span class=\"token punctuation\">:</span> always</code></pre></div>\n<p>ただし、 test が失敗してもキャッシュは保存したいので <code class=\"language-text\">when: always</code> を使用しています。</p>\n<p>あとは <code class=\"language-text\">artifacts</code> らへんの必要なものを deploy などの後続 workflow に渡してあげれば完了です。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">persist_to_workspace</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> .\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> artifacts\n  <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">working_directory</span><span class=\"token punctuation\">:</span> /go/src/github.com/hori<span class=\"token punctuation\">-</span>ryota/hoge\n    <span class=\"token key atrule\">docker</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> circleci/golang<span class=\"token punctuation\">:</span>1.10.2\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> checkout\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">attach_workspace</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">at</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> deploy\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> make deploy\n\n<span class=\"token key atrule\">workflows</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> build\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> test <span class=\"token comment\"># if needed</span>\n          <span class=\"token key atrule\">requires</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> build\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> deploy <span class=\"token comment\"># if needed</span>\n          <span class=\"token key atrule\">requires</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> test </code></pre></div>\n<p>context は横断的に環境変数を設定できるもののようなので、 deploy や test に必要な認証情報などなどを渡したりしています。workflow に対して複数設定できるようになって欲しい。</p>\n<h2>以上</h2>\n<p>同一 key に対して上書き更新をかけられないとのことだったので最初は混乱しましたが、前方一致での検索と把握して納得しました。</p>\n<p>build cache を効かせるととにかく爆速になるのでおすすめです。</p>\n<p>キャッシュの有無による挙動変更はゴリゴリ書くしかなかったので、 step 間に条件分岐など仕込めるようになったらうれしいですね。</p>","excerpt":"今更ながら CircleCI 2.0 を本格的に触りました。 CircleCI 2.0 になりキャッシュの柔軟性が向上したようなので、 Go 1.10 から導入された build cache と併せて最適化してみました。","frontmatter":{"date":"2018-05-19T08:00:00.000Z","title":"CircleCI 2.0 で Go 1.10 の build cache をいい感じに効かせる","tags":["Development","CircleCI","Go"],"eyecatch":null}}},"pageContext":{"urlPath":"/blog/circleci-golang-buildcache-key/","previous":{"fields":{"urlPath":"/blog/golang-channel-pattern/","jstDate":"2017-12-01"},"frontmatter":{"title":"Go の channel 処理パターン集","date":"2017-11-30"}},"next":{"fields":{"urlPath":"/blog/create-go-genaccessor/","jstDate":"2019-02-20"},"frontmatter":{"title":"DDD がしたいので Go の Accessor を go generate する go-genaccessor を作った","date":"2019-02-20"}}}},"staticQueryHashes":["1862978031","277821901","4270455655"]}