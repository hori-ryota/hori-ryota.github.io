{"componentChunkName":"component---src-templates-blog-jsx","path":"/blog/create-go-genconstructor/","result":{"data":{"markdownRemark":{"fields":{"urlPath":"/blog/create-go-genconstructor/","jstDate":"2019-02-21"},"html":"<p>go-genaccessor に続き、今度は required を表現するために constructor を生成する go-genconstructor を作りました。</p>\n<!--more-->\n<h2><a href=\"https://github.com/hori-ryota/go-genconstructor\">hori-ryota/go-genconstructor</a></h2>\n<ul>\n<li>対象ディレクトリ内のファイルを走査して constructor を生成する</li>\n<li><code class=\"language-text\">//genconstructor</code> のついた struct を検知して自動生成</li>\n<li><code class=\"language-text\">required</code> の struct tag がついたもののみコンストラクタの引数にとることで required を表現</li>\n<li>タグのパラメータに指定することで const value 対応</li>\n<li>デフォルトがカレントディレクトリなので <code class=\"language-text\">//go:generate go-genconstructor</code> を対象ディレクトリに記述すれば <code class=\"language-text\">go generate</code> で起動する</li>\n</ul>\n<p>基本的な思想は <a href=\"/blog/create-go-genaccessor\">go-genaccessor</a> と同じですね。</p>\n<blockquote>\n<p><a href=\"/blog/create-go-genaccessor\">DDD がしたいので Go の Accessor を go generate する go-genaccessor を作った</a></p>\n</blockquote>\n<h2>動作サンプル</h2>\n<p>こんな感じで定義します。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>person.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> example\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"time\"</span>\n\n<span class=\"token comment\">//go:generate go-genconstructor</span>\n\n<span class=\"token comment\">//genconstructor</span>\n<span class=\"token keyword\">type</span> Person <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tid        <span class=\"token builtin\">string</span> <span class=\"token string\">`required:\"\"`</span>\n\tname      <span class=\"token builtin\">string</span> <span class=\"token string\">`required:\"\"`</span>\n\ttags      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n\tcreatedAt time<span class=\"token punctuation\">.</span>Time <span class=\"token string\">`required:\"time.Now()\"`</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>こんな感じで出力されます。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>constructor_gen.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Code generated by go-genconstructor; DO NOT EDIT.</span>\n\n<span class=\"token keyword\">package</span> example\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewPerson</span><span class=\"token punctuation\">(</span>\n\tid <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n\tname <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> Person <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> Person<span class=\"token punctuation\">{</span>\n\t\tid<span class=\"token punctuation\">:</span>        id<span class=\"token punctuation\">,</span>\n\t\tname<span class=\"token punctuation\">:</span>      name<span class=\"token punctuation\">,</span>\n\t\tcreatedAt<span class=\"token punctuation\">:</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>モチベーション</h2>\n<ul>\n<li>ドメイン駆動設計（以下 DDD ）をやっていきたい</li>\n<li>DDD ではドメイン層で対象領域の概念をコードで表現することが重要</li>\n<li>本質以外の作業はノイズなので人間にやらせたくない</li>\n<li>\n<p>requied を表現するには constructor が必要だが、</p>\n<ul>\n<li>各 struct に実装して回るのは非本質的</li>\n<li>field の増減時に編集作業が生じるのは非本質的</li>\n<li>コード量が増えるため概念の読み取りにノイズが大きすぎる</li>\n</ul>\n</li>\n</ul>\n<p>ということで例のごとく <code class=\"language-text\">go generate</code> で自動生成することにしました。超捗る。</p>\n<h2>こだわりポイント</h2>\n<p>基本的には <a href=\"/blog/create-go-genaccessor\">go-genaccessor</a> と同じですが</p>\n<ul>\n<li>\n<p>DDD なので概念がシンプルに表現できていて欲しい</p>\n<ul>\n<li>struct tag への記載による定義とすることで、何が required なのかわかりやすく、表現力が高い</li>\n<li>struct tag で表現できているので constructor の実装はノイズになる。よって1ファイルにまとめて生成。</li>\n</ul>\n</li>\n<li>\n<p>概念を表現する作業に集中したい</p>\n<ul>\n<li>型解析ではなく ast での parse とすることで、コンパイルエラーが生じる状態のコードでも generator を実行可能にした</li>\n</ul>\n</li>\n<li>\n<p>固定値や現在時刻を持つ field 定義もサポートしたい</p>\n<ul>\n<li>createdAt 系とか</li>\n<li><code class=\"language-text\">TypeName() string</code> みたいな struct 固定の値とか</li>\n</ul>\n</li>\n<li>ライブラリにロックインしそうな定義記述はできれば避けたい。実現したいことを定義で表現し、ツールは何でもいいとしたい。</li>\n</ul>\n<p>表現力を高め、かつ楽ができるようにしています。</p>\n<h2>go-genaccessor との組み合わせ</h2>\n<p>struct タグは干渉しないので <a href=\"/blog/create-go-genaccessor\">go-genaccessor</a> と組み合わせることができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> example\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"time\"</span>\n\n<span class=\"token comment\">//go:generate go-genaccessor</span>\n<span class=\"token comment\">//go:generate go-genconstructor</span>\n\n<span class=\"token comment\">//genconstructor</span>\n<span class=\"token keyword\">type</span> Person <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tid        <span class=\"token builtin\">string</span>    <span class=\"token string\">`required:\"\" getter:\"\"`</span>\n\tname      <span class=\"token builtin\">string</span>    <span class=\"token string\">`required:\"\" getter:\"\" setter:\"Rename\"`</span>\n\ttags      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>  <span class=\"token string\">`getter:\"\" setter:\"\"`</span>\n\tcreatedAt time<span class=\"token punctuation\">.</span>Time <span class=\"token string\">`required:\"time.Now()\" getter:\"\"`</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>コードに各実装が溢れかえるよりも遥かに意図を汲み取りやすい表現になっているのではないでしょうか。</p>\n<h2>以上</h2>\n<p>go-genconstructor はドメイン層に限らず、 required の概念が必要なところで各所使っていけるものです。 stateless な各 service 系でも依存実装を必ず持つことが保証できます。</p>\n<p>Go の互換性を大事にする思想は素晴らしいものではありますが、 required は required なのできちんと制約を表現することが大事です。そもそも required なものが追加される時点で互換性は失っています。実行時エラーとするよりはコンパイルエラーの恩恵を享受するほうが利便性としても、安全性としても、表現力としても良いと思います。</p>\n<p>readonly と required が表現できるようになったことで DDD における値周りのモデリングは快適になったかと思います。 DDD の他の要素は愚直にコードで表現していってもいいのですが、 generics が無いこともあって人間がやるには辛い作業が生じる概念がいくつかあります。</p>\n<p>次は代表的な「型の恩恵を受けたいが丁寧にやると手が疲れる」概念である error と event について generator を仕込んでいく予定です。</p>\n<ul>\n<li>エラーを表現するための <code class=\"language-text\">go-generror</code></li>\n<li>結果整合性のために用いるアプリケーションイベントのための <code class=\"language-text\">go-genappevent</code></li>\n</ul>\n<p>乞うご期待。</p>","excerpt":"go-genaccessor に続き、今度は required を表現するために constructor を生成する go-genconstructor を作りました。","frontmatter":{"date":"2019-02-21T03:00:00.000Z","title":"DDD するのに Go でも required を表現したくて go-genconstructor を作った","tags":["Development","Go","Code Generator","DDD","Created"],"eyecatch":null}}},"pageContext":{"urlPath":"/blog/create-go-genconstructor/","previous":{"fields":{"urlPath":"/blog/create-go-genaccessor/","jstDate":"2019-02-20"},"frontmatter":{"title":"DDD がしたいので Go の Accessor を go generate する go-genaccessor を作った","date":"2019-02-20"}},"next":{"fields":{"urlPath":"/blog/create-go-generror/","jstDate":"2019-02-22"},"frontmatter":{"title":"表現力の高い Go の Error 群を go generate する go-generror を作った","date":"2019-02-22"}}}},"staticQueryHashes":["1862978031","277821901","4270455655"]}