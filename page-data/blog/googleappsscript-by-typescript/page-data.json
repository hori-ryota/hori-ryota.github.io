{"componentChunkName":"component---src-templates-blog-jsx","path":"/blog/googleappsscript-by-typescript/","result":{"data":{"markdownRemark":{"fields":{"urlPath":"/blog/googleappsscript-by-typescript/","jstDate":"2017-03-19"},"html":"<p>無料で自動化環境を整備できることで有名な Google Apps Script ですが、以前はブラウザで JavaScript を用いて開発する必要があったため辛い部分もありました（人による）。</p>\n<p>現在は公式からローカル開発をするための公式 CLI ツールが提供されているので、静的型付けの恩恵を受けるべく TypeScript を用いて開発できるようにしてみました。</p>\n<!--more-->\n<h2>公式の CLI ツール</h2>\n<ul>\n<li><a href=\"https://gsuite-developers.googleblog.com/2015/12/advanced-development-process-with-apps.html\">G Suite Developers Blog: Advanced Development Process with Apps Script</a></li>\n<li><a href=\"https://github.com/danthareja/node-google-apps-script#11-default-apps-script-developer-console-project\">danthareja/node-google-apps-script: The easiest way to develop Google Apps Script projects</a></li>\n</ul>\n<p>インストール自体は Node.js が入っている環境であれば <code class=\"language-text\">npm install</code> で入れられます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g node-google-apps-script</code></pre></div>\n<p>初期設定として認証キーの発行などが必要です。GitHub の README.md に全て載っていますが、日本語情報ですと以下のブログが詳しかったのでご参照ください。</p>\n<p><a href=\"http://tech.speee.jp/entry/2016/04/28/190236\">Google Apps Scriptの開発をモダンに行う方法 - Speee DEVELOPER BLOG</a></p>\n<h2>ディレクトリ構成</h2>\n\n        <div class=\"gatsby-code-title\">\n          <span>directory-structure</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dev/\nnode_modules/\nsrc/\n.gitignore\ngapps.config.json\npackage.json\nREADME.md\ntsconfig.json</code></pre></div>\n<p>こんな感じです。 CLI がデフォルトで <code class=\"language-text\">src/</code> ディレクトリのものをアップロードするため、 <code class=\"language-text\">dev/</code> を開発用のディレクトリとし、コンパイルした生成ファイルを <code class=\"language-text\">src/</code> に置くようにします。（ <code class=\"language-text\">gapps.config.json</code> で設定できそうなので気持ち悪ければ変更すればよさそうですね。）</p>\n<p>ローカル開発なので Git でバージョン管理できるの最高ですね！テストは今回は省略しています。</p>\n<h2>node_modules</h2>\n<p>TypeScript で開発するために Google Apps Script 用の型定義ファイルを取得します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @types/google-apps-script</code></pre></div>\n<p>TypeScript 2.0 から tsd や typings は不要になったようですね。</p>\n<h2>tsconfig.json</h2>\n\n        <div class=\"gatsby-code-title\">\n          <span>tsconfig.json</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dev\"</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token property\">\"alwaysStrict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"inlineSourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noEmitOnError\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitThis\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pretty\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>オプションは適当です。開発用ディレクトリを <code class=\"language-text\">dev/</code> 、出力ディレクトリを <code class=\"language-text\">src/</code> としたのでそれぞれ設定しています。</p>\n<p>これで <code class=\"language-text\">tsc</code>とコンパイルを実行すれば <code class=\"language-text\">src/</code> ディレクトリに js ファイルが出力されるので、 Google Apps Script にアップロードすればOKです。</p>\n<h2>npm scripts</h2>\n<p>そんなに複雑なコマンドは使いませんが、 npm scripts 化しておきます。</p>\n<p>package.json に以下を定義。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>package.json</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"publish\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build &amp;&amp; npm run upload\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"upload\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gapps upload\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>これで簡単にコンパイルとアップロードができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run publish</code></pre></div>\n<h2>サンプル</h2>\n<p>サンプルとして POST リクエストでカレンダーの予定を作成するスクリプトを作ってみました。 Google Apps Script 独自の Service などは型定義ファイルに global 定義されているのでそのまま使えます。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>gas-sample.ts</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> calendarId <span class=\"token operator\">=</span> <span class=\"token string\">'sample@group.calendar.google.com'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// replace to your calendar id</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostEvent</span> <span class=\"token punctuation\">{</span>\n  queryString<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  parameter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  parameters<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  contentLenth<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  postData<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    contents<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PostEvent</span><span class=\"token punctuation\">;</span>\n  e<span class=\"token punctuation\">.</span>postData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    length<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    contents<span class=\"token operator\">:</span> <span class=\"token string\">'{\"title\":\"sample title\", \"startTime\": \"2017-03-19T09:00:00.000Z\", \"endTime\": \"2017-03-19T12:00:00.000Z\"}'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CalendarEvent</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  startTime<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n  endTime<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> PostEvent<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>GoogleAppsScript<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span>TextOutput <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> calendarEvent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CalendarEvent</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>postData<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">)</span>\n  calendarEvent<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> contents<span class=\"token punctuation\">.</span>title\n  calendarEvent<span class=\"token punctuation\">.</span>startTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">.</span>startTime<span class=\"token punctuation\">)</span>\n  calendarEvent<span class=\"token punctuation\">.</span>endTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">.</span>endTime<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>calendarEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ContentService<span class=\"token punctuation\">.</span><span class=\"token function\">createTextOutput</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> CalendarEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  CalendarApp<span class=\"token punctuation\">.</span><span class=\"token function\">getCalendarById</span><span class=\"token punctuation\">(</span>calendarId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span>\n    e<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n    e<span class=\"token punctuation\">.</span>startTime<span class=\"token punctuation\">,</span>\n    e<span class=\"token punctuation\">.</span>endTime<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>以上</h2>\n<p>以前は <code class=\"language-text\">Logger.log</code> などで頑張ってデバッグしていたのですが、コンパイル時点でタイプミスなどを検知できてとても管理しやすいです。</p>\n<p>Google Apps Script は業務効率化と非常に相性がいい反面、管理が属人化しがちなのが悩みだったのですが、 ローカル開発によって Git 管理やテストが可能になるだけでなく、 TypeScript で静的型付けの恩恵まで受けられるようになったので更に便利になりました。</p>\n<p>SpreadSheet や手動スクレイピング芸などで疲弊している方々はたくさんいると思いますので、ちょろっとスクリプトを書いて自動化できるところはガンガンやっていきたい所存です。</p>\n<p>今回のサンプルは GitHub に置いてあるので、雛形としてお使いください。</p>\n<blockquote>\n<p><a href=\"https://github.com/hori-ryota/gas-typescript\">hori-ryota/gas-typescript</a></p>\n</blockquote>","excerpt":"無料で自動化環境を整備できることで有名な Google Apps Script ですが、以前はブラウザで JavaScript を用いて開発する必要があったため辛い部分もありました（人による）。 現在は公式からローカル開発をするための公式 CLI ツールが提供されているので、静的型付けの恩恵を受けるべく TypeScript を用いて開発できるようにしてみました。","frontmatter":{"date":"2017-03-19T17:15:30+09:00","title":"TypeScript で Google Apps Script を書く環境を整備する","tags":["Development","Google Apps Script","TypeScript"],"eyecatch":null}}},"pageContext":{"urlPath":"/blog/googleappsscript-by-typescript/","previous":{"fields":{"urlPath":"/blog/create-s3-lifecycle-manager/","jstDate":"2017-03-11"},"frontmatter":{"title":"S3 の Lifecycle をコードベースで管理できる環境を整備した","date":"2017-03-11"}},"next":{"fields":{"urlPath":"/blog/aws-ai-api-for-broadcast/","jstDate":"2017-07-05"},"frontmatter":{"title":"AWS の AI 系 API を生放送に取り入れようとしてみた","date":"2017-07-05"}}}},"staticQueryHashes":["1862978031","277821901","4270455655"]}