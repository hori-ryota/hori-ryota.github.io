{"componentChunkName":"component---src-templates-blog-jsx","path":"/blog/golang-channel-pattern/","result":{"data":{"markdownRemark":{"fields":{"urlPath":"/blog/golang-channel-pattern/"},"html":"<p>この記事は <a href=\"https://qiita.com/advent-calendar/2017/go\">Go Advent Calendar 2017</a> の1日目の記事です。</p>\n<p>Go の長所に goroutine による非同期処理がありますが、どうしても channel の取り回しで黒魔術化しがちです。少しでも闇を減らしていきたいので、 channel らへんの取り回しについてパターンをまとめました。チートシート的に使えれば嬉しいです。</p>\n<!--more-->\n<h2>Go の channel の基礎</h2>\n<p>入門資料として使いたいので、本題に入る前にざっくり基礎を。</p>\n<h3>定義のパターン</h3>\n<p>channel には capacity という概念があります。 capacity は channel 内でバッファリングしておける容量のことで、 capacity に空きが無い場合は送信側が処理待ち（ブロック）します。</p>\n<p>capacity なしの定義（int型で capacity 0）</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>capacity ありの定義（int型で capacity 10）</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>close</h3>\n<p>channel は close によって閉じることができます。受信側で検知できるので、受信側に終了を伝えるために使います。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>送信のパターン</h3>\n<p>channel で定義した型の値を投入することができます。前述の通り、 capacity に余裕がなければ受信されるまでブロックします。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">ch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span></code></pre></div>\n<h3>受信のパターン</h3>\n<p>受信の書き方は6パターンあります。</p>\n<p>受信、もしくは close したことだけ検知するパターン。非同期処理の終了を待つ場合に使うことが多いです。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token operator\">&lt;-</span>ch</code></pre></div>\n<p>値を取得するパターン。 close された場合はゼロ値が入ります</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">v <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch</code></pre></div>\n<p>値が入ったのか close されたのかを判別するパターン。 ok が false なら close です。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch\n<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// closed</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>select-case で待ち受けるパターン。順序は保証されませんが複数 channel を同時に待ち受けることができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> v <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch1<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// ch 1</span>\n<span class=\"token keyword\">case</span> v <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch2<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// ch 2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>default をつけると既に値が入っている channel がなければ待たずに default が実行されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> v <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch1<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// ch 1</span>\n<span class=\"token keyword\">case</span> v <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch2<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// ch 2</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// default</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>for-range で処理することもできます。 close されたらループを抜けます。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ch <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// closed</span></code></pre></div>\n<h2>使うときの主な注意点</h2>\n<p>踏みがちな注意点です。これらを回避するために黒魔術が生まれがちです。</p>\n<ul>\n<li>close した channel に event を送ると panic する</li>\n<li>多重に close しても panic する</li>\n<li>受信が先にいなくなると block し続ける</li>\n</ul>\n<p>close 済みな channel を操作すると無視するのではなくしっかり panic するのが Go らしいところです。曖昧さの排除。</p>\n<h2>よくあるアンチパターン</h2>\n<p>実用的なパターン集に入る前に、見かけがちなアンチパターンを紹介しておきます。ブロックし続ける可能性があったり、 panic する可能性があったりします。</p>\n<h3>終了を受信側に伝えるのに終了 event を送る</h3>\n<p>シンプルな処理なら上手く動かせると思いますが、受信側が終了用 channel 以外の何かしらで待ちを抜けた場合に迷子になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>done <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something</span>\n    done <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    done <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// do something</span>\n    <span class=\"token comment\">// この辺で return や panic したら A の goroutine が受け取り側がなく待ち続ける</span>\n\n    <span class=\"token operator\">&lt;-</span>done\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>close させるのが良いですね。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>done <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    done <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// do something</span>\n\n    <span class=\"token operator\">&lt;-</span>done\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>たまに select-case でこういうコードを見かけたりもしますが、前述の通りブロックし続ける可能性があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>jobChan <span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">,</span> done <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> j <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>jobChan<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// do something</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>done<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span>jobs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    jobChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">)</span>\n    done <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>jobChan<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> jobs <span class=\"token punctuation\">{</span>\n        jobChan <span class=\"token operator\">&lt;-</span> j\n    <span class=\"token punctuation\">}</span>\n\n    done <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記ようにシンプルな処理なら、出来る限り for-range を使っていくのがおすすめです。 close されると抜けてくれます。サンプルは以下。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>jobChan <span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> jobChan <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do something</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span>jobs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    jobChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>jobChan<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>jobChan<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> jobs <span class=\"token punctuation\">{</span>\n        jobChan <span class=\"token operator\">&lt;-</span> j\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>close される可能性のある channel を第一戻り値だけで受ける</h3>\n<p>select で待ち受ける場合にうっかりやりがちです。 close されると第一戻り値はゼロ値になるので、想定外の挙動になる可能性があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> v <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>valueORCloseChan<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// do something with v</span>\n        <span class=\"token comment\">// close された場合は vがゼロ値</span>\n    <span class=\"token keyword\">case</span> v <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>otherChan<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// do something</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ok で判定して分岐させます。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>valueORCloseChan<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// closed</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// do something with v</span>\n    <span class=\"token keyword\">case</span> v <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>otherChan<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// do something</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>goroutine から複数 event が来る可能性があるのに始めのものを受けたら抜ける</h3>\n<p>error 用の channel を待つ場合にありがちです。始めのもの以外は迷子になります。特に capacity が 0 の channel の goroutine はずっとブロックし続けます。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>wg <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">,</span> errChan <span class=\"token keyword\">chan</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ここが複数回発火すると詰まる</span>\n        errChan <span class=\"token operator\">&lt;-</span> err\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    wg <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span>\n    errChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n    done <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>wg<span class=\"token punctuation\">,</span> errChan<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>wg<span class=\"token punctuation\">,</span> errChan<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>done<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span> \n    <span class=\"token keyword\">case</span> err <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>errchan<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>受け取るのは一つでいいのであれば、イベント送信側を sync.Once で 1 event しか送られないように統一するのが便利です。もし sync.Once を渡していくのが複雑になる場合は、そもそも設計が複雑すぎる方を疑いたい。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> once sync<span class=\"token punctuation\">.</span>Once\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>wg <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">,</span> errChan <span class=\"token keyword\">chan</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        once<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            errChan <span class=\"token operator\">&lt;-</span> err\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    wg <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span>\n    errChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n    done <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>wg<span class=\"token punctuation\">,</span> errChan<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>wg<span class=\"token punctuation\">,</span> errChan<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>done<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span> \n    <span class=\"token keyword\">case</span> err <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>errchan<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>select の発火順は無保証なのでちょっと怪しいコードです。真面目にやるなら done ではなく errChan を close ですね。</p>\n<p>受け取るのが error であれば <a href=\"https://godoc.org/golang.org/x/sync/errgroup\">errgroup</a> がオススメです。 sync.WaitGroup のような使用感で、 context を使って一つ失敗したら他の処理を cancel する機構付きなので非常に便利。</p>\n<h3>イベント送信時に channel が closed か調べたい</h3>\n<p>複数の送信側処理があり、受信は一つで良い場合に欲しくなるやつ。たまに欲しくなります。</p>\n<p>が、今のところ便利なインターフェースは提供されていません。</p>\n<p>受信してみて第二戻り値が false なら closed ですが、受信すると第一戻り値を普通に受け取っちゃう場合もあるのでよろしくない。</p>\n<p>一応こんな感じで実装してみましたが、アンチパターン臭がすごい。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">isClosed</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> Value<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ch <span class=\"token operator\">&lt;-</span> v\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">isClosed</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ch <span class=\"token operator\">&lt;-</span> <span class=\"token function\">SomeValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記のコードは lock を仕込んでおらず、チェック後に close されている可能性が残っているので実用的ではないです。 lock 処理まで入れるとがんじがらめな黒魔術になるので別の手段を取ったほうが良さそう。</p>\n<h3>高速に送りまくる</h3>\n<p>例えばシンプルな slice 処理に比べるとパフォーマンスがどうしても悪くなるので、高パフォーマンスが必要な箇所ではベンチを取って検証した方がいいです。</p>\n<p>ちょっと雑ですが、シンプルに slice で入れ出しする場合と channel を経由して入れ出しする場合のベンチを取ってみました。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkWithSimpleSlice</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tsrc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n\tdst <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">ResetTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// write</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> src <span class=\"token punctuation\">{</span>\n\t\t\tdst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// read</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> dst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkWithChannel</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tsrc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n\tch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">ResetTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// write</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> src <span class=\"token punctuation\">{</span>\n\t\t\tch <span class=\"token operator\">&lt;-</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// read</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token operator\">&lt;-</span>ch\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>結果が以下。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> BenchmarkWithSimpleSlice       2000000              8991 ns/op\n BenchmarkWithChannel             30000            580989 ns/op</code></pre></div>\n<p><code class=\"language-text\">570,000 ns/op</code> くらいの差が出ているので、 <code class=\"language-text\">57 ns/item</code> くらいでしょうか。ベンチマークとしての妥当性はともかく、高パフォーマンスが必要なところではある程度の考慮が必要になりそうなことは伝わるかと思います。</p>\n<h2>channel で並列数管理する場合のパターン</h2>\n<p>ここから実用的なパターン集です。</p>\n<p>並列数10だとこんな感じ。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>jobs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sem <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> jobs <span class=\"token punctuation\">{</span>\n        sem <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            j<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&lt;-</span>sem\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>capacity の仕組みを使ってブロックさせることで並列数管理をしています。</p>\n<p>worker 的な用途で使う場合、 queue 取得のタイミングに注意。 channel に入れる前に queue を取得すると持ったままブロックします。考慮するなら以下のような感じでしょうか。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>jobs <span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sem <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        sem <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        j<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>jobs\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            j<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&lt;-</span>sem\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>重み付けなどが必要になったら <a href=\"https://godoc.org/golang.org/x/sync/semaphore\">semaphore</a> が便利です。</p>\n<h2>channel で処理の終了を待つパターン</h2>\n<p>シンプルに待つだけ。 close して使うのがおすすめです。ちなみに、値が要らない場合は <code class=\"language-text\">struct{}</code> がサイズ 0 のデータなのでおすすめです。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>done <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    done <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// wait</span>\n    <span class=\"token operator\">&lt;-</span>done\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>channel の closed を検知するパターン</h2>\n<p>アンチパターンと言ったばかりですが、 close するだけの channel なら使い所があります。</p>\n<p>特に、メソッド内で context の状態を確認するのにたまに使います。 cancel されているか確認するのに Done() で返ってくる chan が closed か判定したい。 select-case の default を使います。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> isDone <span class=\"token builtin\">bool</span>\n<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        isDone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        isDone <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>こんな感じ。自分はメソッド化して使ったりします。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">isDone</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>たまに Done 検知のサンプルで default がないものがありますが、 select 文では default がないとどれかの channel からイベントが返るまでブロックするので注意です。</p>\n<h2>channel で繰り返し処理する場合のパターン集</h2>\n<p>基本的には <code class=\"language-text\">送信側を先に片付ける -&gt; channel を close する -&gt; 受信側が待ちを抜ける</code> の順番で処理するように意識するのが大事です。 select 待ち受けも使い所はありますが、なるべく for-range と defer を使っていく方がおすすめです。</p>\n<h3>送信側は1つ and 受信側は1つ</h3>\n<p>並列化するほどじゃないけど受け取り処理はさっさと済ませて遅延処理させたいシンプルなパターン。 channel の capacity が溢れない程度に受信側が上手いこと処理してくれている（間に合っている）場合はコレで足りる。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>queue <span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> queue <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do something</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    queue <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        j<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">someHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> err\n        <span class=\"token punctuation\">}</span>\n        queue <span class=\"token operator\">&lt;-</span> j\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>間に合わなくなってきたら次述のように受信側を増やしていきます。</p>\n<h3>送信側は1つ and 受信側は複数</h3>\n<p>受け取り側の処理が1つじゃ追いつかない場合によく書く worker スタイル。ただの goroutine 起動との違いは並列数の管理です。</p>\n<p>送信側が1つなので、受信側が複数に増えても channel を close してあげれば問題なし。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>queue <span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> queue <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do something</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> workerNum <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    queue <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> workerNum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        j<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">someHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> err\n        <span class=\"token punctuation\">}</span>\n        queue <span class=\"token operator\">&lt;-</span> j\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>送信側は複数 and 受信側は1つ</h3>\n<p>並列処理の結果を収集したい場合によく書く。キャンセルにしろ正常終了にしろ、全ての送信処理が終わったことを確認してから受信側を抜ける必要がある。</p>\n<p>送信処理の goroutine があといくつ残っているかを数えてあげて、全て片付いたら close してあげれば OK 。atomic 系で数えてあげてもいいけど、 sync.WaitGroup が好みです。</p>\n<p>とあるページング的リクエストを分割して並列実行し、結果を配列に集めるパターン。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">someRequest</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to <span class=\"token builtin\">uint</span><span class=\"token punctuation\">,</span> resultChan <span class=\"token keyword\">chan</span> Result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    results <span class=\"token operator\">:=</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> results <span class=\"token punctuation\">{</span>\n        resultChan <span class=\"token operator\">&lt;-</span> r\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Result <span class=\"token punctuation\">{</span>\n    resultChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> Result<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    wg <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        from <span class=\"token operator\">:=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\n        to <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\n        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">someRequest</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> resultChan<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>resultChan<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    results <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> resultChan <span class=\"token punctuation\">{</span>\n        results <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> results\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>各送信側にキャンセルを伝えたい場合は専用の channel を渡してあげてもいいけど、 context を渡すのが楽。外部コマンドや外部リクエストにもそのまま渡せるので。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">someRequest</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> to <span class=\"token builtin\">uint</span><span class=\"token punctuation\">,</span> resultChan <span class=\"token keyword\">chan</span> Result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    results <span class=\"token operator\">:=</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> results <span class=\"token punctuation\">{</span>\n        resultChan <span class=\"token operator\">&lt;-</span> r\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Result <span class=\"token punctuation\">{</span>\n    resultChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> Result<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    wg <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        from <span class=\"token operator\">:=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\n        to <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\n        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">someRequest</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> resultChan<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>resultChan<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    results <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> resultChan <span class=\"token punctuation\">{</span>\n        results <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> results\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>送信側は複数 and 受信側は複数</h3>\n<p>Dispatcher - Worker 的な。 Dispatcher を独自に用意しているサンプルが散見されますが、型によって受け渡す worker を変えて云々、みたいな分岐が必要なければ channel 自体が dispatcher になります。</p>\n<p>基本的には受信側が増える分には close を使えば問題なし。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>queue <span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> queue <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do something</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">someRequest</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to <span class=\"token builtin\">uint</span><span class=\"token punctuation\">,</span> callbackJobQueue <span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    results <span class=\"token operator\">:=</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> results <span class=\"token punctuation\">{</span>\n        callbackQueue <span class=\"token operator\">&lt;-</span> <span class=\"token function\">NewJob</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n    workerNum <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    queue <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n    wg <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> workerNum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        from <span class=\"token operator\">:=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\n        to <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\n        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">someRequest</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>結果を収集したければ worker に収集用の channel を渡せば OK 。</p>\n<h3>select 待ち受けについて</h3>\n<p>基本的には for-range をおすすめします。 select を使うのは以下のような場合かなーと。</p>\n<ul>\n<li>\n<p>ループではなく一回だけ発火するやーつ</p>\n<ul>\n<li>\n<p>全て close 待ち</p>\n<ul>\n<li>どれかが close されたら処理を抜ける場合。とはいえ発火順序は保証されないので使い所があまり思いつかなかった</li>\n</ul>\n</li>\n<li>\n<p>待ち受ける複数 channel のうち、一つしか返ってこないことが保証される場合</p>\n<ul>\n<li>非同期処理で resolve か reject のどちらかだけ返ってくる場合など。</li>\n</ul>\n</li>\n<li>\n<p>一個受けたらもう抜けちゃっていいやつ</p>\n<ul>\n<li>\n<p>例えば signal 処理。プロセスを終了するなら一個だけ受ければいい</p>\n<ul>\n<li><a href=\"https://golang.org/pkg/os/signal/\">signal</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>抜ける気がないループ</p>\n<ul>\n<li>プロセスが死ぬまで動かし続けるので色々気にしないでいい場合</li>\n</ul>\n</li>\n<li>\n<p>ちゃんと送信側が片付いたことを全て確認できている</p>\n<ul>\n<li>前述の送信側が複数あるパターンと同じく、 sync.WaitGroup などでちゃんと管理できている場合。ただし、 for-range と違い全ての channel が受信済みであることも保証しないと受信漏れが生じるのでややこしい。</li>\n<li>それぞれで for-range を組むほうがシンプルになりがち（個人の見解）</li>\n</ul>\n</li>\n</ul>\n<p>受信漏れの考慮に苦心しがちなので、 channel でループする場合は for-range に寄せていったほうが楽かなーと思っています。</p>\n<p>timeout 処理や context.Done のハンドリングは悩ましいところですが、なるべく context の仕組みに頼り、どうしても必要なところは受信漏れを考慮した上で select 待ち受けするのがいいかと。 capacity なしの結果用 channel を返す上、 timeout 処理がちゃんと実装されていないメソッドがあったとしても、 context 対応でシンプルに使える wrapper を用意したいところ。</p>\n<p>ちなみにありがちなミスとして、 select in for loop で close された channel があると暴走します。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ch1 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    ch2 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ch1<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span> ch1<span class=\"token punctuation\">:</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span> ch2<span class=\"token punctuation\">:</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記のように select-case で closed な channel があるとひたすら発火して <code class=\"language-text\">1</code> が出力され続けます。多段の event 待ち受けで受信側から送信側に送信停止を伝播させたい場合にやりがち。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>ch1 <span class=\"token keyword\">chan</span> Event<span class=\"token punctuation\">,</span> stopA <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ch1<span class=\"token punctuation\">)</span>\n\n    t <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTicker</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>t<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span>\n            ch1 <span class=\"token operator\">&lt;-</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>stopA<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span>ch1 <span class=\"token keyword\">chan</span> Event<span class=\"token punctuation\">,</span> ch2 <span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">,</span> stopB <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> stopA <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ch2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> e<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch1<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n            ch2 <span class=\"token operator\">&lt;-</span> <span class=\"token function\">NewJob</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>stopB<span class=\"token punctuation\">:</span>\n            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>stopA<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">C</span><span class=\"token punctuation\">(</span>ch2 <span class=\"token keyword\">chan</span> Job<span class=\"token punctuation\">,</span> stopB <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ch2 <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>stopB<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記のような Event を受けて Job を dispatch するコードだと、 B の <code class=\"language-text\">stopB</code> の case が連続発火して <code class=\"language-text\">stopA</code> を多重 close し、 panic します。</p>\n<p>対処としては channel ごとに待ち受ける goroutine を分けて処理したり、 nil で上書きして case 判定から除外したりでしょうか？ 個人的には設計が怪しくなっていると判断してリファクタしたくなります。</p>\n<h3>エラー収集（一つだけ拾えば OK ）</h3>\n<p><a href=\"https://godoc.org/golang.org/x/sync/errgroup\">errgroup</a> が楽すぎるので使っていきましょう</p>\n<h3>エラー収集（複数集める）</h3>\n<p>for-range で各処理から error を集め、処理が全て終わったら close します。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    errChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    wg <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n                errChan <span class=\"token operator\">&lt;-</span> err\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>errChan<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    errors <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> errChan <span class=\"token punctuation\">{</span>\n        errors <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> errors\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>エラー収集（結果も集める）</h3>\n<p>結果と error をまとめた struct を用意すれば error のみと同じように書けます。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Wrapper <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Result Result\n    Error  <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Wrapper <span class=\"token punctuation\">{</span>\n    resultChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> Wrapper<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    wg <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            result<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultChan <span class=\"token operator\">&lt;-</span> Wrapper<span class=\"token punctuation\">{</span>\n                Result<span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">,</span>\n                Error<span class=\"token punctuation\">:</span>  err<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>resultChan<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    results <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Wrapper<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> resultChan <span class=\"token punctuation\">{</span>\n        results <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> results\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>channel を増やして並べる書き方もできます。ただし、 capacity に注意しないとブロックします（以下の例だと <code class=\"language-text\">errChan</code> を先に処理しているので、 <code class=\"language-text\">resultChan</code> が飽和したら詰まる）。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Result<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    errChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    resultChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> Result<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    wg <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            result<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n                errChan <span class=\"token operator\">&lt;-</span> err\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n            resultChan <span class=\"token operator\">&lt;-</span> result\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>errChan<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>resultChan<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    errors <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> errChan <span class=\"token punctuation\">{</span>\n        errors <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    results <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> resultChan <span class=\"token punctuation\">{</span>\n        results <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">,</span> errors\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>前者のほうが安全ですが、個人的には後続処理で結果と error を分離するなら capacity に気をつけながら後者でもいいかなーと思っています。</p>\n<h2>以上</h2>\n<p>とりあえずこの辺のパターンを組み合わせれば頻出する処理は書けるかと思います。誤りや改善点など、何かありましたらぜひご指摘いただければ幸いです。</p>\n<p>なお、実際には sync.WaitGroup を channel に変換しているところなどはメソッド化して使うのがオススメです。</p>\n<p>個人的にはシンプルな for-range ではなく select-case の loop で色々やり始めたら黄色信号かなーと思っているのですが、使い所も確かにあるので難しい。</p>\n<p>重めの処理を非同期 worker でゴリゴリやりたくなったらぜひ参考にしてみてください！</p>","excerpt":"この記事は Go Advent Calendar 2017 の1日目の記事です。 Go の長所に goroutine による非同期処理がありますが、どうしても channel の取り回しで黒魔術化しがちです。少しでも闇を減らしていきたいので、 channel らへんの取り回しについてパターンをまとめました。チートシート的に使えれば嬉しいです。","frontmatter":{"date":"2017-11-30","title":"Go の channel 処理パターン集","tags":["Development","Go"],"eyecatch":null}}},"pageContext":{"urlPath":"/blog/golang-channel-pattern/","previous":{"fields":{"urlPath":"/blog/failed-to-grpc-with-nlb/"},"frontmatter":{"title":"gRPC with NLB は idle timeout に気をつけないと死ぬ","date":"2017-10-22"}},"next":{"fields":{"urlPath":"/blog/circleci-golang-buildcache-key/"},"frontmatter":{"title":"CircleCI 2.0 で Go 1.10 の build cache をいい感じに効かせる","date":"2018-05-19"}}}},"staticQueryHashes":["2432199166","277821901","3202776293"]}