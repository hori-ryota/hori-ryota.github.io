{"componentChunkName":"component---src-templates-blog-jsx","path":"/blog/create-go-genaccessor/","result":{"data":{"markdownRemark":{"fields":{"urlPath":"/blog/create-go-genaccessor/"},"html":"<p>Go で DDD をやっていくため、 struct に getter setter を生やせる go-genaccessor を作りました。</p>\n<!--more-->\n<h2><a href=\"https://github.com/hori-ryota/go-genaccessor\">hori-ryota/go-genaccessor</a></h2>\n<ul>\n<li>対象ディレクトリ内のファイルを走査して accessor を生成する</li>\n<li><code class=\"language-text\">getter</code> <code class=\"language-text\">setter</code> の struct tag を検知して自動生成</li>\n<li>タグのパラメータに指定することで alias 対応</li>\n<li>デフォルトがカレントディレクトリなので <code class=\"language-text\">//go:generate go-genaccessor</code> を対象ディレクトリに記述すれば <code class=\"language-text\">go generate</code> で起動する</li>\n</ul>\n<h2>動作サンプル</h2>\n<p>こんな感じで定義します。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>person.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> example\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"encoding\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//go:generate go-genaccessor</span>\n\n<span class=\"token keyword\">type</span> Person <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tid   <span class=\"token builtin\">string</span>                 <span class=\"token string\">`getter:\"\"`</span>\n\tname <span class=\"token builtin\">string</span>                 <span class=\"token string\">`getter:\"\" setter:\"Rename\"`</span>\n\ttags <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>               <span class=\"token string\">`getter:\"\" setter:\"\"`</span>\n\ttext encoding<span class=\"token punctuation\">.</span>TextMarshaler <span class=\"token string\">`getter:\"\" setter:\"\"`</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>こんな感じで出力されます。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>accessor_gen.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Code generated by go-genaccessor; DO NOT EDIT.</span>\n\n<span class=\"token keyword\">package</span> example\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"encoding\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m Person<span class=\"token punctuation\">)</span> <span class=\"token function\">ID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span>id\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m Person<span class=\"token punctuation\">)</span> <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Person<span class=\"token punctuation\">)</span> <span class=\"token function\">Rename</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> s\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m Person<span class=\"token punctuation\">)</span> <span class=\"token function\">Tags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span>tags\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Person<span class=\"token punctuation\">)</span> <span class=\"token function\">SetTags</span><span class=\"token punctuation\">(</span>s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm<span class=\"token punctuation\">.</span>tags <span class=\"token operator\">=</span> s\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m Person<span class=\"token punctuation\">)</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> encoding<span class=\"token punctuation\">.</span>TextMarshaler <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span>text\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Person<span class=\"token punctuation\">)</span> <span class=\"token function\">SetText</span><span class=\"token punctuation\">(</span>s encoding<span class=\"token punctuation\">.</span>TextMarshaler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> s\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>モチベーション</h2>\n<ul>\n<li>ドメイン駆動設計（以下 DDD ）をやっていきたい</li>\n<li>DDD ではドメイン層で対象領域の概念をコードで表現することが重要</li>\n<li>\n<p>Go で readonly を表現するのがつらすぎる</p>\n<ul>\n<li>\n<p>field はプライベートにし、必要な field に適切な getter を実装する必要がある</p>\n<ul>\n<li>概念の表現に集中するには作業ノイズが大きすぎる</li>\n<li>コード量が増えるため概念の読み取りにノイズが大きすぎる</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>ということで <code class=\"language-text\">go generate</code> で自動生成することにしました。超捗る。</p>\n<p>コードジェネレータでの生成はフレームワークと違って用途が合わなくなっても過去の生成物はそのまま利用できるのが美味しいですね。</p>\n<h2>こだわりポイント</h2>\n<ul>\n<li>\n<p>DDD なので概念がシンプルに表現できていて欲しい</p>\n<ul>\n<li>struct tag への記載による定義とすることで、何が読み取り可 or 書き込み可なのかわかりやすく、表現力が高い</li>\n<li>struct tag で表現できているので accessor の実装はノイズになる。よって1ファイルにまとめて生成。</li>\n</ul>\n</li>\n<li>\n<p>概念を表現する作業に集中したい</p>\n<ul>\n<li>型解析ではなく ast での parse とすることで、コンパイルエラーが生じる状態のコードでも generator を実行可能にした</li>\n</ul>\n</li>\n<li>\n<p>setter の乱用は防ぎたいが、シンプルな値置換はサポートしたい</p>\n<ul>\n<li>\n<p>alias を導入することで <code class=\"language-text\">Rename</code> のような表現力が高いシンプルな値置換を generate 対象にした</p>\n<ul>\n<li>副産物として getter も alias 設定が可能となり、ダックタイピング等がしやすくなった</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ライブラリにロックインしそうな定義記述はできれば避けたい。実現したいことを定義で表現し、ツールは何でもいいとしたい。</li>\n</ul>\n<p>単に楽ができればいいというわけではなく、表現力を高めるための一助となることを目的としました。</p>\n<h2>以上</h2>\n<p>ドメイン層とアプリケーション層ではそれぞれドメイン概念とアプリケーション概念を的確に表現することがとても重要なので、本質的な表現以外は全てノイズと考えて人間は気にしないでいいようにしていきたいです。</p>\n<p>私事ですが、諸事情で動画配信エンジニアは引退して開発効率おじさんに業務転換することにしました。 まずは正しい DDD の浸透にモチベーションがあるので、ちょこちょこ発信していければと思います。</p>\n<p>手始めに generator を色々と整えているのですが、直近では</p>\n<ul>\n<li>required を表現するための <code class=\"language-text\">go-genconstructor</code></li>\n<li>エラーを表現するための <code class=\"language-text\">go-generror</code></li>\n<li>結果整合性のために用いるアプリケーションイベントのための <code class=\"language-text\">go-genappevent</code></li>\n</ul>\n<p>の公開を予定しています。乞うご期待。</p>","excerpt":"Go で DDD をやっていくため、 struct に getter setter を生やせる go-genaccessor を作りました。","frontmatter":{"date":"2019-02-20","title":"DDD がしたいので Go の Accessor を go generate する go-genaccessor を作った","tags":["Development","Go","Code Generator","DDD","Created"],"eyecatch":null}}},"pageContext":{"urlPath":"/blog/create-go-genaccessor/","previous":{"fields":{"urlPath":"/blog/circleci-golang-buildcache-key/"},"frontmatter":{"title":"CircleCI 2.0 で Go 1.10 の build cache をいい感じに効かせる","date":"2018-05-19"}},"next":{"fields":{"urlPath":"/blog/create-go-genconstructor/"},"frontmatter":{"title":"DDD するのに Go でも required を表現したくて go-genconstructor を作った","date":"2019-02-21"}}}},"staticQueryHashes":["2432199166","277821901","3202776293"]}