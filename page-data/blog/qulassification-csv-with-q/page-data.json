{"componentChunkName":"component---src-templates-blog-jsx","path":"/blog/qulassification-csv-with-q/","result":{"data":{"markdownRemark":{"fields":{"urlPath":"/blog/qulassification-csv-with-q/","jstDate":"2017-02-03"},"html":"<p>大量の CSV ファイルを処理する必要にかられて見つけた <a href=\"http://harelba.github.io/q/\">q</a> が便利すぎたので SQL の CASE 文と合わせてランク分類をして遊んでみました。</p>\n<!--more-->\n<h2>q とは</h2>\n<p>CSV を SQL で処理できるコマンドラインツールです。 CSV だけでなくタブ区切りの TSV にも対応しているとのこと。</p>\n<blockquote>\n<p><a href=\"http://harelba.github.io/q/\">Run SQL directly on CSV files | Text as Data | q</a></p>\n</blockquote>\n<h3>使い方</h3>\n<p>公式のヘルプに書いてあるとおりではありますが、引数に SQL とファイルを取れば結果が標準出力に出力できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">q <span class=\"token string\">\"SELECT * FROM file.csv\"</span></code></pre></div>\n<p><code class=\"language-text\">-H</code> オプションでヘッダの有無を選べたり、 <code class=\"language-text\">-d</code> オプションで区切り文字を選べたり、割りと小回りがきく印象。</p>\n<p>ヘルプも各オプションの説明が丁寧に書いてあって使いやすい。</p>\n<h2>今回やったこと</h2>\n<p>某プロジェクトにて、とあるところから出力された独自形式の （エクセルの）xlsxファイルにあるデータを条件によってランク分けをしたいとのこと。</p>\n<p>q は SQL の CASE 文にも対応しているので楽勝です。</p>\n<h3>xlsx を CSV に変換</h3>\n<p>エクセルで作業する用に出力されているデータなので、元データは独自形式の xlsx ファイルでした。</p>\n<p>とりあえず xlsx を CSV に変換します。</p>\n<p>いろいろ試してまともに動かせたのはこちらのツール。</p>\n<blockquote>\n<p><a href=\"https://github.com/dilshod/xlsx2csv\">dilshod/xlsx2csv: Convert xslx to csv, it is fast, and works for huge xlsx files</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">xlsx2csv <span class=\"token variable\">$xlsx</span> <span class=\"token variable\">$csv</span></code></pre></div>\n<p>元データは扱いやすいように見た目が成形され、8行目から CSV のデータが貼り付けられている形式だったので、7行削るなど。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sed</span> -i <span class=\"token string\">\"\"</span> -e <span class=\"token string\">'1,7d'</span> <span class=\"token variable\">$csv</span></code></pre></div>\n<h3>SQL どばー</h3>\n<p>q を使ってランク分け。 CASE が使えるの幸せですね。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">q -H -d<span class=\"token string\">','</span> -O <span class=\"token string\">\"select id, foo, bar, baz, \nCASE\nWHEN foo >= 9 AND bar >= 0.8 THEN 'A'\nWHEN foo >= 3 AND bar >= 0.6 THEN 'B'\nWHEN foo >= 1 AND bar >= 0.1 THEN 'C'\nELSE 'D'\nEND as rank\nfrom <span class=\"token variable\">$csv</span>\"</span> <span class=\"token operator\">></span> <span class=\"token variable\">$dst</span></code></pre></div>\n<p><code class=\"language-text\">$dst</code> に出力される各行の末尾に <code class=\"language-text\">rank</code> が追加されます。</p>\n<p>もちろん <code class=\"language-text\">SUM</code> も使えるのでランクごとの集計もこんな感じで。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">q -H -d<span class=\"token string\">','</span> <span class=\"token string\">\"select \nSUM(CASE rank WHEN 'A' THEN 1 ELSE 0 END) AS A,\nSUM(CASE rank WHEN 'B' THEN 1 ELSE 0 END) AS B,\nSUM(CASE rank WHEN 'C' THEN 1 ELSE 0 END) AS C,\nSUM(CASE rank WHEN 'D' THEN 1 ELSE 0 END) AS D\nfrom <span class=\"token variable\">$dst</span>\"</span></code></pre></div>\n<h3>シェル芸で大量ファイルを一括処理</h3>\n<p>各処理をコマンド化できたので、あとはスクリプト化してファイルをループ処理。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">set</span> -e\n<span class=\"token builtin class-name\">set</span> -u\n\n<span class=\"token function\">mkdir</span> -p csv\n<span class=\"token function\">mkdir</span> -p dst\n<span class=\"token assign-left variable\">result</span><span class=\"token operator\">=</span>result.csv\n:<span class=\"token operator\">></span> <span class=\"token variable\">$result</span>\n\n<span class=\"token assign-left variable\">ids</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ls</span> xlsx/*.xlsx <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s;^.*/;;'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s;.xlsx;;'</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">id</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">${ids<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$id</span>\n  <span class=\"token assign-left variable\">src</span><span class=\"token operator\">=</span>xlsx/<span class=\"token variable\">$id</span>.xlsx\n  <span class=\"token assign-left variable\">csv</span><span class=\"token operator\">=</span>csv/<span class=\"token variable\">$id</span>.csv\n  <span class=\"token assign-left variable\">dst</span><span class=\"token operator\">=</span>dst/<span class=\"token variable\">$id</span>.csv\n\n  xlsx2csv <span class=\"token variable\">$src</span> <span class=\"token variable\">$csv</span>\n\n  <span class=\"token function\">sed</span> -i <span class=\"token string\">\"\"</span> -e <span class=\"token string\">'1,5d'</span> <span class=\"token variable\">$csv</span>\n\n  q -H -d<span class=\"token string\">','</span> -O <span class=\"token string\">\"select id, foo, bar, baz, \n  CASE\n  WHEN foo >= 9 AND bar >= 0.8 THEN 'A'\n  WHEN foo >= 3 AND bar >= 0.6 THEN 'B'\n  WHEN foo >= 1 AND bar >= 0.1 THEN 'C'\n  ELSE 'D'\n  END as rank\n  from <span class=\"token variable\">$csv</span>\"</span> <span class=\"token operator\">></span> <span class=\"token variable\">$dst</span>\n\n  <span class=\"token assign-left variable\">sum</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>q -H -d<span class=\"token string\">','</span> <span class=\"token string\">\"select \n  SUM(CASE rank WHEN 'A' THEN 1 ELSE 0 END) AS A,\n  SUM(CASE rank WHEN 'B' THEN 1 ELSE 0 END) AS B,\n  SUM(CASE rank WHEN 'C' THEN 1 ELSE 0 END) AS C,\n  SUM(CASE rank WHEN 'D' THEN 1 ELSE 0 END) AS D\n  from <span class=\"token variable\">$dst</span>\"</span><span class=\"token variable\">)</span></span>\n\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$sum</span>\n\n  <span class=\"token builtin class-name\">echo</span> -n <span class=\"token variable\">${id<span class=\"token operator\">##</span>*_}</span> <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> -d <span class=\"token string\">'<span class=\"token entity\" title=\"\\n\">\\n</span>'</span> <span class=\"token operator\">>></span> <span class=\"token variable\">$result</span>\n  <span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">','</span> <span class=\"token operator\">>></span> <span class=\"token variable\">$result</span>\n  <span class=\"token builtin class-name\">echo</span> -n <span class=\"token variable\">$sum</span> <span class=\"token operator\">>></span> <span class=\"token variable\">$result</span>\n\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">''</span> <span class=\"token operator\">>></span> <span class=\"token variable\">$result</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<h2>以上</h2>\n<p>元データを CSV で持っていなかったり、条件を指定したデータの出力が叶わなかったりするなど、社会は厳しいことが多いので雑シェル力は大事ですね。</p>","excerpt":"大量の CSV ファイルを処理する必要にかられて見つけた q が便利すぎたので SQL の CASE 文と合わせてランク分類をして遊んでみました。","frontmatter":{"date":"2017-02-03T23:44:34+09:00","title":"CSV を SQL で扱える 'q' を使って数値データのランク分け芸","tags":["Shell","Data Shaping","q"],"eyecatch":null}}},"pageContext":{"urlPath":"/blog/qulassification-csv-with-q/","previous":{"fields":{"urlPath":"/blog/create-shellscript-for-hugo-images/","jstDate":"2017-01-31"},"frontmatter":{"title":"Hugo のサムネ作成、画像追加、画像最適化を自動化するシェル芸","date":"2017-01-31"}},"next":{"fields":{"urlPath":"/blog/ffmpeg-broadcast-with-clock/","jstDate":"2017-02-19"},"frontmatter":{"title":"デジタル時計を載せた生放送を FFmpeg だけで実現する","date":"2017-02-19"}}}},"staticQueryHashes":["1862978031","277821901","4270455655"]}