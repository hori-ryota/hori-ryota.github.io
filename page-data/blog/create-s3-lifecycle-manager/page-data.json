{"componentChunkName":"component---src-templates-blog-jsx","path":"/blog/create-s3-lifecycle-manager/","result":{"data":{"markdownRemark":{"fields":{"urlPath":"/blog/create-s3-lifecycle-manager/"},"html":"<p>S3のLifecycleをポチポチしているのが辛くなったので、カッとなって作りました。</p>\n<p>awscliとjqがあれば動くので、簡易的なコードベース管理の雛形としてお使いください。</p>\n<!--more-->\n<h2><a href=\"https://github.com/hori-ryota/s3-lifecycle-manager\">hori-ryota/s3-lifecycle-manager</a></h2>\n<p>あくまで個人使用のために作成したので、細かいアレコレはご容赦ください。</p>\n<p>お約束ですが、 <strong>使用は自己責任でお願いします。</strong></p>\n<p>以下、記事公開時点のREADME.mdと同内容のものに補足を加えたものです。</p>\n<h2>README.md</h2>\n<p><a href=\"https://github.com/hori-ryota/cloudfront-manager\">hori-ryota/cloudfront-manager: Scripts for CloudFront</a> から派生して作りました。</p>\n<p>S3のlifecycleをポチポチ運用するのが辛いのでawscliを用いたjson管理にするやつです。</p>\n<h3>（基礎知識）主要なawsコマンド</h3>\n<p><a href=\"http://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/set-lifecycle-cli.html\">AWS CLI を使用したライフサイクル設定の設定 - Amazon Simple Storage Service</a></p>\n<h3>ディレクトリ構成</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">targetBuckets.txt # 管理対象とするbucketリスト\njson/             # apiから取得したjson置き場</code></pre></div>\n<p>更新はjsonディレクトリ内のファイルを更新してS3に反映してください。</p>\n<h3>スクリプト</h3>\n<p>vim の quickrun で叩きやすくするため、dirname などでのパス解決はしていないです。 <code class=\"language-text\">s3-lifecycle-manager/</code> ディレクトリ直下で実行してください。</p>\n<h4><a href=\"fetchall.sh\">fetchall.sh</a></h4>\n<p>初期化用。 <code class=\"language-text\">targetBuckets.txt</code> に記載されているbucketのlifecycleを取ってきてjsonディレクトリに反映。</p>\n<p>削除済みのjson削除は行わないので、削除も必要ならjsonディレクトリを削除後に実行してください。</p>\n<h4><a href=\"update.sh\">update.sh</a></h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./update.sh <span class=\"token variable\">${targetCName}</span></code></pre></div>\n<p>更新用。<code class=\"language-text\">get-bucket-lifecycle-configuration</code> のjsonと <code class=\"language-text\">put-bucket-lifecycle-configuration</code> の形式は若干違うので、<code class=\"language-text\">jq</code> コマンドで整形したものを入力へ。</p>\n<h4>全bucketを targetBuckets.txt に入れたい場合</h4>\n<p>このコマンドで入るかと思います。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">aws s3api list-buckets <span class=\"token operator\">|</span> jq -r <span class=\"token string\">'.Buckets[].Name'</span> <span class=\"token operator\">></span> targetBuckets.txt</code></pre></div>\n<h2>補足</h2>\n<p>lifecycle が未設定な bucket に fetch をかけるとエラーになるので、以下のようなスクリプトで初期化するのも良いと思います。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>apply-cleaning-multipart-upload.sh</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">set</span> -eu\n\n<span class=\"token assign-left variable\">dir</span><span class=\"token operator\">=</span><span class=\"token string\">'json'</span>\n<span class=\"token function\">mkdir</span> -p <span class=\"token variable\">$dir</span>\n\n<span class=\"token assign-left variable\">buckets</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> ./targetBuckets.txt<span class=\"token variable\">)</span></span>\"</span>\n\n<span class=\"token assign-left variable\">json</span><span class=\"token operator\">=</span><span class=\"token string\">'{\n  \"Rules\": [\n    {\n      \"Filter\": {\n        \"Prefix\": \"\"\n      },\n      \"Status\": \"Enabled\",\n      \"ID\": \"incomplete-multipart\",\n      \"AbortIncompleteMultipartUpload\": {\n        \"DaysAfterInitiation\": 1\n      }\n    }\n  ]\n}'</span>\n\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">bucket</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$buckets</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"fetch <span class=\"token variable\">$bucket</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$json</span> <span class=\"token operator\">|</span> jq <span class=\"token string\">'.'</span> <span class=\"token operator\">></span> <span class=\"token string\">\"<span class=\"token variable\">$dir</span>/<span class=\"token variable\">$bucket</span>.json\"</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>上記のスクリプトは <code class=\"language-text\">targetBuckets.txt</code> の全ての bucket の json に対し、不完全な Mupltipart Upload の残骸を1日で削除する lifecycle を設定指定しています。</p>\n<p>その上で <code class=\"language-text\">fetchall.sh</code> を以下のように書き換えて実行すると、既存のもののみ上書きされるので初期化に良いです。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>fetchall.sh</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">set</span> -u\n\n<span class=\"token assign-left variable\">dir</span><span class=\"token operator\">=</span><span class=\"token string\">'json'</span>\n<span class=\"token function\">mkdir</span> -p <span class=\"token variable\">$dir</span>\n\n<span class=\"token assign-left variable\">buckets</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> ./targetBuckets.txt<span class=\"token variable\">)</span></span>\"</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">bucket</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$buckets</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"fetch <span class=\"token variable\">$bucket</span>\"</span>\n  <span class=\"token assign-left variable\">target</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>aws s3api get-bucket-lifecycle-configuration --bucket <span class=\"token string\">\"<span class=\"token variable\">$bucket</span>\"</span><span class=\"token variable\">)</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> -ne <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"not initialized\"</span>\n    <span class=\"token builtin class-name\">continue</span>\n  <span class=\"token keyword\">fi</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$target</span> <span class=\"token operator\">|</span> jq <span class=\"token string\">'.'</span> <span class=\"token operator\">></span> <span class=\"token string\">\"<span class=\"token variable\">$dir</span>/<span class=\"token variable\">$bucket</span>.json\"</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>書き換えた部分は <code class=\"language-text\">set -eu</code> の <code class=\"language-text\">e</code> フラグを外してエラーが生じても落ちないようにしたのと、 <code class=\"language-text\">if [ $? -ne 0 ]</code> によって fetch の成否で後続処理を分岐させているところです。</p>\n<p>とりあえず Multipart Upload のゴミ掃除はどの bucket でも設定しておきたいものだとは思うので初期化としては妥当ではないでしょうか。</p>\n<h2>以上</h2>\n<p>やっぱりコードベースでインフラ管理をできるのは設定の手間もミスも無くせる上にバージョン管理やレビューも導入できて幸福度が高いですね。どんどん推し進めていきたいと思います。</p>\n<p>lifecycle はそれなりの数（試したところ200は少なくとも設定できた）が設定できるので、大量のオブジェクトを削除する際に prefix で絞れる場合は lifecycle を 1d で設定して待つとリクエスト数も節約できる上に楽なので、コードベースで気軽にベタベタ変更できるのはとても嬉しいです。</p>\n<p>ちなみに Terraform でも lifecycle の管理はできるようなので、 bucket を Terraform で管理している場合はそちらを使用するのが良いかもしれません。今のところ私の使い方では影響範囲を絞ってフランクに管理したかったのでスクリプトでの json 管理が捗っています。</p>","excerpt":"S3のLifecycleをポチポチしているのが辛くなったので、カッとなって作りました。 awscliとjqがあれば動くので、簡易的なコードベース管理の雛形としてお使いください。","frontmatter":{"date":"2017-03-11","title":"S3 の Lifecycle をコードベースで管理できる環境を整備した","tags":["Development","Shell","AWS","S3","Created"],"eyecatch":null}}},"pageContext":{"urlPath":"/blog/create-s3-lifecycle-manager/","previous":{"fields":{"urlPath":"/blog/aurora-matsuri20170307/"},"frontmatter":{"title":"Amazon Aurora 事例祭り（20170307）に行ってきたメモ","date":"2017-03-07"}},"next":{"fields":{"urlPath":"/blog/googleappsscript-by-typescript/"},"frontmatter":{"title":"TypeScript で Google Apps Script を書く環境を整備する","date":"2017-03-19"}}}},"staticQueryHashes":["2432199166","277821901","3202776293"]}