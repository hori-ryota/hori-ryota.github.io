{"componentChunkName":"component---src-templates-blog-jsx","path":"/blog/create-go-generror/","result":{"data":{"markdownRemark":{"fields":{"urlPath":"/blog/create-go-generror/","jstDate":"2019-02-22"},"html":"<p>連日 DDD と go generate で投稿していますが、今回は表現力と安全性の高い Error 周りを生成する go-generror を作りました。</p>\n<!--more-->\n<h2><a href=\"https://github.com/hori-ryota/go-generror\">hori-ryota/go-generror</a></h2>\n<ul>\n<li>対象ディレクトリ内のファイルを走査して Error 型を生成する</li>\n<li>\n<p><code class=\"language-text\">Error</code> と <code class=\"language-text\">ErrorDetail</code> の2層構造</p>\n<ul>\n<li>\n<p><code class=\"language-text\">Error</code> : <code class=\"language-text\">error</code> インターフェースを実装し、 <code class=\"language-text\">ErrorCode</code> を一つ、 <code class=\"language-text\">ErrorDetail</code> を複数持つ。</p>\n<ul>\n<li>\n<p><code class=\"language-text\">ErrorCode</code>: HTTP の StatusCode のような使用感を想定。生成された <code class=\"language-text\">Error</code> が <code class=\"language-text\">IsFoo() bool</code> のような判定メソッドを持つ</p>\n<ul>\n<li>引数を元に生成される</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">ErrorDetail</code> : エラーの詳細定義が目的。 UI や Log に出力したい、サービス内エラー詳細。 <code class=\"language-text\">ErrorDetailCode</code> とパラメータを持つ</p>\n<ul>\n<li>\n<p><code class=\"language-text\">ErrorDetailCode</code> : 詳細エラーのコード。コードごとに固定長の型安全なパラメータを定義する</p>\n<ul>\n<li><code class=\"language-text\">//errcode</code> のコメントを検知して生成される</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>デフォルトがカレントディレクトリなので <code class=\"language-text\">//go:generate go-generror</code> を対象ディレクトリに記述すれば <code class=\"language-text\">go generate</code> で起動する</li>\n</ul>\n<h2>動作サンプル</h2>\n<p>こんな感じで定義します。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>example.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> example\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"errors\"</span>\n\n<span class=\"token comment\">//go:generate go-generror Unknown BadRequest PermissionDenied NotFound</span>\n\n<span class=\"token keyword\">type</span> NameSpec <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tlessThan <span class=\"token builtin\">int</span>\n\tmoreThan <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s NameSpec<span class=\"token punctuation\">)</span> <span class=\"token function\">Validate</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Error <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//errcode NameIsInvalidLength,lessThan int,moreThan int</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">.</span>lessThan <span class=\"token operator\">||</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">.</span>moreThan <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ErrorBadRequest</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NameIsInvalidLengthError</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>lessThan<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>moreThan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Validate</code> のメソッド内に <code class=\"language-text\">//errcode</code> が記述されています。</p>\n<p>こんな感じで出力されます。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>error_gen.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Code generated ; DO NOT EDIT</span>\n\n<span class=\"token keyword\">package</span> example\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n\n\t<span class=\"token string\">\"github.com/hori-ryota/zaperr\"</span>\n\t<span class=\"token string\">\"go.uber.org/zap\"</span>\n\t<span class=\"token string\">\"go.uber.org/zap/zapcore\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> ErrorCode <span class=\"token builtin\">string</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\terrorUnknown          ErrorCode <span class=\"token operator\">=</span> <span class=\"token string\">\"Unknown\"</span>\n\terrorBadRequest       ErrorCode <span class=\"token operator\">=</span> <span class=\"token string\">\"BadRequest\"</span>\n\terrorPermissionDenied ErrorCode <span class=\"token operator\">=</span> <span class=\"token string\">\"PermissionDenied\"</span>\n\terrorNotFound         ErrorCode <span class=\"token operator\">=</span> <span class=\"token string\">\"NotFound\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c ErrorCode<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Error <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n\t<span class=\"token function\">Details</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ErrorDetail\n\n\t<span class=\"token function\">IsUnknown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>\n\t<span class=\"token function\">IsBadRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>\n\t<span class=\"token function\">IsPermissionDenied</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>\n\t<span class=\"token function\">IsNotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">newError</span><span class=\"token punctuation\">(</span>source <span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> code ErrorCode<span class=\"token punctuation\">,</span> details <span class=\"token operator\">...</span>ErrorDetail<span class=\"token punctuation\">)</span> Error <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> errorImpl<span class=\"token punctuation\">{</span>\n\t\tsource<span class=\"token punctuation\">:</span>  source<span class=\"token punctuation\">,</span>\n\t\tcode<span class=\"token punctuation\">:</span>    code<span class=\"token punctuation\">,</span>\n\t\tdetails<span class=\"token punctuation\">:</span> details<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">ErrorUnknown</span><span class=\"token punctuation\">(</span>source <span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> details <span class=\"token operator\">...</span>ErrorDetail<span class=\"token punctuation\">)</span> Error <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">newError</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> errorUnknown<span class=\"token punctuation\">,</span> details<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ErrorBadRequest</span><span class=\"token punctuation\">(</span>source <span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> details <span class=\"token operator\">...</span>ErrorDetail<span class=\"token punctuation\">)</span> Error <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">newError</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> errorBadRequest<span class=\"token punctuation\">,</span> details<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ErrorPermissionDenied</span><span class=\"token punctuation\">(</span>source <span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> details <span class=\"token operator\">...</span>ErrorDetail<span class=\"token punctuation\">)</span> Error <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">newError</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> errorPermissionDenied<span class=\"token punctuation\">,</span> details<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ErrorNotFound</span><span class=\"token punctuation\">(</span>source <span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> details <span class=\"token operator\">...</span>ErrorDetail<span class=\"token punctuation\">)</span> Error <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">newError</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> errorNotFound<span class=\"token punctuation\">,</span> details<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> errorImpl <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tsource  <span class=\"token builtin\">error</span>\n\tcode    ErrorCode\n\tdetails <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ErrorDetail\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e errorImpl<span class=\"token punctuation\">)</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s:%s:%s\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>details<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e errorImpl<span class=\"token punctuation\">)</span> <span class=\"token function\">Details</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ErrorDetail <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>details\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e errorImpl<span class=\"token punctuation\">)</span> <span class=\"token function\">IsUnknown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> errorUnknown\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e errorImpl<span class=\"token punctuation\">)</span> <span class=\"token function\">IsBadRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> errorBadRequest\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e errorImpl<span class=\"token punctuation\">)</span> <span class=\"token function\">IsPermissionDenied</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> errorPermissionDenied\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e errorImpl<span class=\"token punctuation\">)</span> <span class=\"token function\">IsNotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> errorNotFound\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> ErrorDetail <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tcode ErrorDetailCode\n\targs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">newErrorDetail</span><span class=\"token punctuation\">(</span>code ErrorDetailCode<span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> ErrorDetail <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ErrorDetail<span class=\"token punctuation\">{</span>\n\t\tcode<span class=\"token punctuation\">:</span> code<span class=\"token punctuation\">,</span>\n\t\targs<span class=\"token punctuation\">:</span> args<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e ErrorDetail<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> ErrorDetailCode <span class=\"token builtin\">string</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c ErrorDetailCode<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ErrorDetailNameIsInvalidLength ErrorDetailCode <span class=\"token operator\">=</span> <span class=\"token string\">\"NameIsInvalidLength\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NameIsInvalidLengthError</span><span class=\"token punctuation\">(</span>\n\tlessThan <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n\tmoreThan <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> ErrorDetail <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">newErrorDetail</span><span class=\"token punctuation\">(</span>\n\t\tErrorDetailNameIsInvalidLength<span class=\"token punctuation\">,</span>\n\t\tstrconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>lessThan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tstrconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>moreThan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e errorImpl<span class=\"token punctuation\">)</span> <span class=\"token function\">MarshalLogObject</span><span class=\"token punctuation\">(</span>enc zapcore<span class=\"token punctuation\">.</span>ObjectEncoder<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tzaperr<span class=\"token punctuation\">.</span><span class=\"token function\">ToNamedField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sourceError\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddTo</span><span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span>\n\tzap<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddTo</span><span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span>\n\tzap<span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"details\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>details<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>モチベーション</h2>\n<ul>\n<li>ドメイン駆動設計（以下 DDD ）をやっていきたい</li>\n<li>DDD ではドメイン層で対象領域の概念をコードで表現することが重要</li>\n<li>本質以外の作業はノイズなので人間にやらせたくない</li>\n<li>\n<p>Go の <code class=\"language-text\">error</code> は表現力に乏しく、ドメイン層でのエラーは独自定義が望まれる</p>\n<ul>\n<li>上層で型安全でないアサーション地獄をするのは Type-safe な言語のメリットを消している</li>\n</ul>\n</li>\n<li>\n<p>サービス開発で特にコミュニケーション＆作業コストが高い領域なので自動生成の恩恵が大きい</p>\n<ul>\n<li>メンテが後手に回りがちなドキュメントとにらめっこしがち</li>\n<li>\n<p>ドキュメントを読んで型安全でない string とパラメータ群の switch 文。つらい。</p>\n<ul>\n<li>副産物としてドキュメントを提供していきたい</li>\n<li>副産物として型安全な Formatter 等を提供していきたい</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>ということで <code class=\"language-text\">go generate</code> で自動生成することにしました。使用感は良さそう。</p>\n<p>今回は「この Error 型が正しい！」という話ではなく、エラー定義を parse して成果物を generate することのメリットの話が重要なポイントです。</p>\n<h3>エラー定義から成果物を generate するメリットについて</h3>\n<p>エラー出力は以下のような理由によりメンテナンスコストが高く、型安全でなく、テストしづらいものだと思います。</p>\n<ul>\n<li>サービス仕様の変更により種類が増減しやすい</li>\n<li>増減が多いこともありドキュメントの更新が漏れやすい</li>\n<li>正常系テストでは生じないものも多く、 backend 実装者のモチベーションが低くなりがち</li>\n<li>新しいエラーを作るのが面倒で既存エラーに便乗したくなりがち</li>\n<li>\n<p>可変な値を出力文言に組み入れたいが、対応コストが高くなりがち</p>\n<ul>\n<li>バリデーションロジックとの整合性担保が悩ましい</li>\n<li>型安全でなく、エラー種ごとに switch 文などで対応しがち</li>\n<li>型安全でなく、多言語対応での対応漏れ検知が難しい</li>\n</ul>\n</li>\n<li>仕様書との対応確認が目視</li>\n<li>使っていなさそうなエラー種が消していいのかわからない</li>\n</ul>\n<p>ちゃんとモチベーション高く管理すれば全て解決はできると思いますが、異常系対応のコストはなるべく低く保ちたいです。</p>\n<p>欲しいものは以下と考えます。</p>\n<ul>\n<li>\n<p>backend として</p>\n<ul>\n<li>安全に補完の恩恵をうけつつエラー生成したい</li>\n<li>定義だけ書きたい。型安全にする系の退屈な実装は定義から作っといて欲しい</li>\n<li>使用箇所で気軽に定義したい（含：ドキュメントの更新など）</li>\n</ul>\n</li>\n<li>\n<p>frontend として</p>\n<ul>\n<li>安全に補完の恩恵をうけつつエラー対応したい</li>\n<li>事情が変わったら適切に検知したい</li>\n<li>対応すべきものが把握しやすいのがいい</li>\n<li>文言管理はまとめたい</li>\n<li>多言語対応したい</li>\n</ul>\n</li>\n</ul>\n<p>backend 実装箇所でのエラー定義生成とすることで、上記の欲求は以下のように改善されます。</p>\n<ul>\n<li>\n<p>backend として</p>\n<ul>\n<li>\n<p>安全に補完の恩恵をうけつつエラー生成したい</p>\n<ul>\n<li>型安全な生成コードで Type-safe の恩恵に預かれる</li>\n</ul>\n</li>\n<li>\n<p>定義だけ書きたい。型安全にする系の退屈な実装は定義から作っといて欲しい</p>\n<ul>\n<li>定義から実装を生成するので楽</li>\n</ul>\n</li>\n<li>\n<p>使用箇所で気軽に定義したい（含：ドキュメントの更新など）</p>\n<ul>\n<li>実装箇所に定義を書けば邪魔にならないところに生成される</li>\n<li>ドキュメントなども必要であれば然るべきところに自動生成できる</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>frontend として</p>\n<ul>\n<li>\n<p>安全に補完の恩恵をうけつつエラー対応したい</p>\n<ul>\n<li>型安全な Formatter interface を生成すれば Type-safe の恩恵に預かれる</li>\n</ul>\n</li>\n<li>\n<p>事情が変わったら適切に検知したい</p>\n<ul>\n<li>型安全な Formatter interface を生成すれば Type-safe の恩恵に預かれる</li>\n</ul>\n</li>\n<li>\n<p>対応すべきものが把握しやすいのがいい</p>\n<ul>\n<li>型安全な Formatter interface を生成すれば Type-safe の恩恵に預かれる</li>\n<li>ドキュメントなども必要であれば然るべきところに自動生成できる</li>\n</ul>\n</li>\n<li>\n<p>文言管理はまとめたい</p>\n<ul>\n<li>Formatter interface を生成し、実装をまとめれば OK</li>\n</ul>\n</li>\n<li>\n<p>多言語対応したい</p>\n<ul>\n<li>Formatter interface の実装を言語ごとに実装すれば OK</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><code class=\"language-text\">go-generror</code> では <code class=\"language-text\">generror.Run</code> を exported 定義しているので、独自定義の <code class=\"language-text\">main.go</code> を用意すればデフォルトファイル以外の生成が可能です。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">templates <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>template<span class=\"token punctuation\">.</span>Template<span class=\"token punctuation\">{</span>\n    generror<span class=\"token punctuation\">.</span>GodefTmpl<span class=\"token punctuation\">,</span>\n    customTmpl1<span class=\"token punctuation\">,</span>\n    customTmpl2<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nrenderers <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>generror<span class=\"token punctuation\">.</span>TemplParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> templates <span class=\"token punctuation\">{</span>\n    tmpl <span class=\"token operator\">:=</span> tempates<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    dstFileName <span class=\"token operator\">:=</span> dstFileNames<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    renderers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>param generror<span class=\"token punctuation\">.</span>TmplParam<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\n        param<span class=\"token punctuation\">.</span>ImportPackages <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span>ImportPackages<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fmt\"</span><span class=\"token punctuation\">)</span>\n        param<span class=\"token punctuation\">.</span>ImportPackages <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span>ImportPackages<span class=\"token punctuation\">,</span> <span class=\"token string\">\"strings\"</span><span class=\"token punctuation\">)</span>\n        param<span class=\"token punctuation\">.</span>ImportPackages <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span>ImportPackages<span class=\"token punctuation\">,</span> <span class=\"token string\">\"go.uber.org/zap\"</span><span class=\"token punctuation\">)</span>\n        param<span class=\"token punctuation\">.</span>ImportPackages <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span>ImportPackages<span class=\"token punctuation\">,</span> <span class=\"token string\">\"go.uber.org/zap/zapcore\"</span><span class=\"token punctuation\">)</span>\n        param<span class=\"token punctuation\">.</span>ImportPackages <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span>ImportPackages<span class=\"token punctuation\">,</span> <span class=\"token string\">\"github.com/hori-ryota/zaperr\"</span><span class=\"token punctuation\">)</span>\n\n        buf <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span>\n        err <span class=\"token operator\">:=</span> tmpl<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> err\n        <span class=\"token punctuation\">}</span>\n\n        out<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">Source</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">Bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> err\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">WriteFile</span><span class=\"token punctuation\">(</span>dstFileName<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">,</span> <span class=\"token number\">0644</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> generror<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> renderers<span class=\"token punctuation\">)</span></code></pre></div>\n<p>よって、以下のようなテンプレートを用意することで（サンプルは Go ですが） Formatter を生成することができます。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>customTmpl.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ErrorFormatter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">.</span>DetailErrorCodes <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>Code <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">.</span>Params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>Name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>Type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span> end <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span> end <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> ErrorDetail <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Code <span class=\"token builtin\">string</span>\n    Args <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">FormatError</span><span class=\"token punctuation\">(</span>formatter ErrorFormatter<span class=\"token punctuation\">,</span> err ErrorDetail<span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> err<span class=\"token punctuation\">.</span>Code <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">.</span>DetailErrorCodes <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"{{ .Code }}\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> formatter<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>Code <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span> <span class=\"token keyword\">range</span> $i<span class=\"token punctuation\">,</span> $v <span class=\"token operator\">:=</span> <span class=\"token punctuation\">.</span>Params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n            err<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> $i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> $v<span class=\"token punctuation\">.</span>Type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span> end <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span> end <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>generated</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>error_gen.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ErrorFormatter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">NameIsInvalidLengthError</span><span class=\"token punctuation\">(</span>\n\t\tlessThan <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n\t\tmoreThan <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n\t<span class=\"token function\">FooError</span><span class=\"token punctuation\">(</span>\n\t\targ1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n\t\targ2 time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span>\n\t\targ3 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n\t<span class=\"token function\">BarError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> ErrorDetail <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tCode <span class=\"token builtin\">string</span>\n\tArgs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">FormatError</span><span class=\"token punctuation\">(</span>formatter ErrorFormatter<span class=\"token punctuation\">,</span> err ErrorDetail<span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> err<span class=\"token punctuation\">.</span>Code <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"NameIsInvalidLength\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> formatter<span class=\"token punctuation\">.</span><span class=\"token function\">NameIsInvalidLengthError</span><span class=\"token punctuation\">(</span>\n\t\t\terr<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\terr<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> formatter<span class=\"token punctuation\">.</span><span class=\"token function\">FooError</span><span class=\"token punctuation\">(</span>\n\t\t\terr<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\terr<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\terr<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"Bar\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> formatter<span class=\"token punctuation\">.</span><span class=\"token function\">BarError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>この型安全な <code class=\"language-text\">ErrorFormatter</code> を実装することで各種メリットを享受できるようになります。通信層での型変換も自動生成が可能です。</p>\n<p>ただのテンプレート生成なので Go 言語以外の他言語にも工夫次第で対応できます（個人的には Kotlin 対応を試し中です）。</p>\n<h2>以上</h2>\n<p>これでドメインの重要な表現であるエラー周りについても、見やすく楽に、表現力は高く定義することが可能になりました。ドメイン層での概念の表現に集中することは非常に重要なため、大きなメリットとなります。</p>\n<p>Go は基本的に <code class=\"language-text\">error</code> インターフェースを推奨しますが、それは内部実装に依存せずに汎用的な error として扱うことを呼び出し元に求めることが前提です。呼び出し元に型安全を求めるのにわざわざ表現力を落とした <code class=\"language-text\">error</code> インターフェースで抽象化して型アサーションする必要はないし、デメリットが大きいと思っています。</p>\n<p>さて、代表的な「型の恩恵を受けたいが丁寧にやると手が疲れる」概念である error と event の前者が達成できたので、次は event を仕込む予定です。</p>\n<p>event はその特性上、 generics が無いことや複数送受信などで実装が複雑になりがちですが、 generator を使うことで効率化と快適さを得ることができるはずです。</p>\n<p>乞うご期待。</p>","excerpt":"連日 DDD と go generate で投稿していますが、今回は表現力と安全性の高い Error 周りを生成する go-generror を作りました。","frontmatter":{"date":"2019-02-22T02:05:00.000Z","title":"表現力の高い Go の Error 群を go generate する go-generror を作った","tags":["Development","Go","Code Generator","DDD","Created"],"eyecatch":null}}},"pageContext":{"urlPath":"/blog/create-go-generror/","previous":{"fields":{"urlPath":"/blog/create-go-genconstructor/","jstDate":"2019-02-21"},"frontmatter":{"title":"DDD するのに Go でも required を表現したくて go-genconstructor を作った","date":"2019-02-21"}},"next":{"fields":{"urlPath":"/blog/starting-development-with-ddd/","jstDate":"2019-09-04"},"frontmatter":{"title":"継続的に価値を提供するドメイン駆動設計入門","date":"2019-09-04"}}}},"staticQueryHashes":["1862978031","277821901","4270455655"]}