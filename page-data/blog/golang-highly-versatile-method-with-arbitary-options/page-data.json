{"componentChunkName":"component---src-templates-blog-jsx","path":"/blog/golang-highly-versatile-method-with-arbitary-options/","result":{"data":{"markdownRemark":{"fields":{"urlPath":"/blog/golang-highly-versatile-method-with-arbitary-options/"},"html":"<p><a href=\"https://godoc.org/google.golang.org/grpc#DialOption\">grpc の DialOption</a> のオプション設定方法が上手いなーと感心したのですが、初見で理解するのが難しかったので備忘録がてら解説してみます。</p>\n<!--more-->\n<h2>やりたいこと</h2>\n<p>golang にはオーバーロード（同名メソッドでも引数によって呼び出されるメソッドが変わるやつ）がないので、任意のオプションを取るメソッドを作るのに工夫が必要です。</p>\n<p>可変引数の仕組みはあるので任意数の値をメソッドに渡したり、オプション用の struct を引数に取ることで実装できなくはないのですがデメリットがあります（後述）。</p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc#DialOption\">DialOption</a> がそのへんの葛藤を上手いこと解決していたのでご紹介。</p>\n<h2>ダメだった例</h2>\n<p>はじめに検討したのですがよろしく無かった例です。</p>\n<ul>\n<li>可変引数でオプションを渡す</li>\n<li>オプション用の struct を渡す</li>\n</ul>\n<h3>可変引数でオプションを渡す</h3>\n<p>golang では可変引数の仕組みがあるので、任意数のオプションを渡すこと自体はできます。</p>\n<blockquote>\n<p><a href=\"https://golang.org/ref/spec#Passing_arguments_to_..._parameters\">The Go Programming Language Specification - The Go Programming Language</a></p>\n</blockquote>\n<p>ただ、この場合はオプションとして取れる型が一種類になってしまうので <code class=\"language-text\">interface{}</code> 型を使うことになるかと思います。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>この場合、各 option が何を意味しているか判定するには型判定が必要になります。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> TimeoutOpt time<span class=\"token punctuation\">.</span>Duration\n<span class=\"token keyword\">type</span> BarOpt     <span class=\"token builtin\">string</span>\n\n<span class=\"token keyword\">type</span> fooOptions <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    timeout time<span class=\"token punctuation\">.</span>Duration\n    bar     <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    opt <span class=\"token operator\">:=</span> fooOptions<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> o <span class=\"token operator\">:=</span> options <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> v <span class=\"token operator\">:=</span> o<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> TimeoutOpt<span class=\"token punctuation\">:</span>\n                opt<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">case</span> BarOpt<span class=\"token punctuation\">:</span>\n                opt<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\">// unknown option</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// use opt</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TimeoutOpt</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">BarOpt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qux\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>気になる点は以下です。</p>\n<ul>\n<li><code class=\"language-text\">interface{}</code> を使っているので未知の値が入ってくる可能性がある</li>\n<li><code class=\"language-text\">case</code> に全オプションの処理を書くので漏れが生じそう</li>\n</ul>\n<p>どちらのデメリットも option 用に interface を定義したり、テストを書くことによって防げないこともないのはもちろんですが、 DialOption のほうが綺麗に書けました。</p>\n<h3>オプション用の struct を渡す</h3>\n<p>引数に struct を取るパターンです。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> FooOptions <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Timeout time<span class=\"token punctuation\">.</span>Duration\n    Bar     <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opt fooOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// use opt</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">,</span> FooOptions<span class=\"token punctuation\">{</span>\n        Timeout<span class=\"token punctuation\">:</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span>\n        BarOpt<span class=\"token punctuation\">:</span>  <span class=\"token string\">\"qux\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>シンプルでいいのですが、 option が不要な場合に空の struct （ポインタなら <code class=\"language-text\">nil</code> ）を渡すことになります。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">,</span> FooOptions<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ちょっとダサい。</p>\n<h2>DialOption の実装</h2>\n<p><a href=\"https://godoc.org/google.golang.org/grpc#DialOption\">DialOption</a> を参考に実装すると以下のようになります。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> fooOptions <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    timeout time<span class=\"token punctuation\">.</span>Duration\n    bar     <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> FooOption <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fooOptions<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> FooOption <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ops <span class=\"token operator\">*</span>fooOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ops<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> timeout\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithBar</span><span class=\"token punctuation\">(</span>bar <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> FooOption <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ops <span class=\"token operator\">*</span>fooOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ops<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> bar\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span>FooOption<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    opt <span class=\"token operator\">:=</span> fooOptions<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> o <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">o</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// use opt</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithBar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qux\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">WithXXX</code> らへんが独自定義の struct を引数をとるメソッドを返しているのでちょっとわかりづらいですが、 <code class=\"language-text\">main</code> を見ると型安全に任意数のオプションが取れているのが分かるかと思います。</p>\n<p>また、 <code class=\"language-text\">Foo</code> メソッド内も <code class=\"language-text\">for</code> 文で回すだけのシンプルな実装です。</p>\n<h3>オプションの型はメソッド型</h3>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> FooOption <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fooOptions<span class=\"token punctuation\">)</span></code></pre></div>\n<p>この <code class=\"language-text\">FooOption</code> は</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ops <span class=\"token operator\">*</span>fooOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ops<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> timeout\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>のように struct の <code class=\"language-text\">fooOptions</code> をポインタで受けて書き換えるメソッドの型です。メソッドなので</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span>FooOption<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    opt <span class=\"token operator\">:=</span> fooOptions<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> o <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">o</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// use opt</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>の <code class=\"language-text\">o(&amp;opt)</code> のように <code class=\"language-text\">fooOptions</code> のポインタを引数に取れば値を設定することができます。</p>\n<p>メソッドとして定義したオプションを可変引数としてとることで、オプションの中身が何であるかを気にせずに単純な <code class=\"language-text\">for</code> 文によって適用できる仕組みです。</p>\n<h3>WithXXX はクロージャを利用して関数リテラルを返す</h3>\n<p>そして肝となる <code class=\"language-text\">WithXXX</code> ですが、</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> FooOption <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ops <span class=\"token operator\">*</span>fooOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ops<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> timeout\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>こちらは JavaScript などでよく見かけるクロージャの仕組みを利用しています。</p>\n<p>関数リテラルのスコープにある変数は関数内から参照することができるため、 <code class=\"language-text\">WithTimeout(timeout time.Duration)</code> の引数である <code class=\"language-text\">timeout</code> 値を、返却した <code class=\"language-text\">FooOption</code> 関数から参照することができます。</p>\n<p>つまり、</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span></code></pre></div>\n<p>とすることで</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.go</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ops <span class=\"token operator\">*</span>fooOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ops<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>Second\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>と等価な関数リテラルが返却され、 <code class=\"language-text\">WithTimeout(time.Second)</code> の引数で渡された値を <code class=\"language-text\">fooOptions</code> struct に設定する <code class=\"language-text\">FooOption</code> メソッドが取得できます。</p>\n<p>オプションとして渡す値を関数リテラルで統一し、設定の詳細と設定値は関数リテラル内に閉じ込めることで、型安全で汎用的なオプション設定が実現できました。</p>\n<h2>以上</h2>\n<p>クロージャを利用した関数リテラルを返却することでオプション設定とする、という発想がなかったので非常に勉強になりました。</p>\n<p>使い所としては任意オプションが欲しくなるところ全般ですが、 <a href=\"https://golang.org/pkg/os/exec/#Command\">exec.Command</a> を使った外部コマンド実行のオプション設定時などに使うと便利ですね。</p>\n<p>業務で go 1.5 時代からの試行錯誤コードをリファクタリングしているところなので、また色々と気づいたことをメモしていきたいと思います。</p>","excerpt":"grpc の DialOption のオプション設定方法が上手いなーと感心したのですが、初見で理解するのが難しかったので備忘録がてら解説してみます。","frontmatter":{"date":"2017-02-21","title":"golang で汎用的な任意数のオプションを取るメソッドの作り方","tags":["Development","Go"],"eyecatch":null}}},"pageContext":{"urlPath":"/blog/golang-highly-versatile-method-with-arbitary-options/","previous":{"fields":{"urlPath":"/blog/ffmpeg-broadcast-with-clock/"},"frontmatter":{"title":"デジタル時計を載せた生放送を FFmpeg だけで実現する","date":"2017-02-19"}},"next":{"fields":{"urlPath":"/blog/create-docker-image-with-gobin-in-alpine/"},"frontmatter":{"title":"Docker in Docker で Go 製のバイナリを持った軽量な Docker イメージを作る","date":"2017-02-24"}}}},"staticQueryHashes":["2432199166","277821901","3202776293"]}