{"data":{"recommendedPosts":{"edges":[{"node":{"excerpt":"<p>個人的な話となり恐縮ですが、2019年はドメイン駆動設計の戦術周りでたくさんの試行錯誤ができた有意義な年となりました。</p>\n<p>活動していく中で課題感に共感を得られたり方向性の違いを実感できたり学びが多かったので、雑記として残しておこうかと思います。</p>\n","fields":{"urlPath":"/blog/ddd-in-2019/","jstDate":"2019-12-24"},"frontmatter":{"date":"2019-12-24T11:00:00+09:00","title":"DDDの個人的な現状 in 2019","eyecatch":null}}},{"node":{"excerpt":"<p>世界へ継続的に価値を提供するコストはもっと低くてもいいはずだと思う。</p>\n<p>継続的な価値提供への一つの手法としてドメイン駆動設計があるが、特にアプリケーション設計においては大局的な理解を得ることが難しいように思われる。</p>\n<p>ドメイン駆動設計によるアプリケーション開発においてどういうことを実現したいのか。</p>\n<p>本記事では大局的な思想に注目することで設計の入門となることを期待したい。</p>\n","fields":{"urlPath":"/blog/starting-development-with-ddd/","jstDate":"2019-09-04"},"frontmatter":{"date":"2019-09-04T11:06:00.000Z","title":"継続的に価値を提供するドメイン駆動設計入門","eyecatch":null}}},{"node":{"excerpt":"<p>この記事は <a href=\"https://qiita.com/advent-calendar/2017/go\">Go Advent Calendar 2017</a> の1日目の記事です。</p>\n<p>Go の長所に goroutine による非同期処理がありますが、どうしても channel の取り回しで黒魔術化しがちです。少しでも闇を減らしていきたいので、 channel らへんの取り回しについてパターンをまとめました。チートシート的に使えれば嬉しいです。</p>\n","fields":{"urlPath":"/blog/golang-channel-pattern/","jstDate":"2017-12-01"},"frontmatter":{"date":"2017-11-30T15:00:00.000Z","title":"Go の channel 処理パターン集","eyecatch":null}}}]}}}